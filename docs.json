[
  {
    "name": "stdAcc",
    "fileName": "stdAcc.cls",
    "methods": [
      {
        "name": "GetDescendents",
        "description": " Get all descendents of the stdAcc control\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " Collection<stdAcc> ",
          "description": "Collection of descendents\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "FindFirst",
        "description": " Search the IAccessible tree for elements which match a certain criteria. Return the first element found.\r\n",
        "remarks": [],
        "examples": [
          " ```\r\n'Find where name is \"hello\" and class is \"world\":\r\n"
        ],
        "params": [
          {
            "name": "query",
            "type": "stdICallable<(stdAcc,depth)=>EAccFindResult>",
            "description": "Callback returning `EAccFindResult` options:",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "searchType",
            "type": "EAccFindType=EAccFindType.DepthFirst",
            "description": "The type of search to perform, either Breadth First Search (BFS) or Depth First Search (DFS).",
            "optional": true,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " {stdAcc} ",
          "description": "Element found.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "FindAll",
        "description": " Search the IAccessible tree for elements which match a certain criteria. Return all elements found.\r\n",
        "remarks": [],
        "examples": [
          " ```\r\n'Find where name is \"hello\" and class is \"world\":\r\n"
        ],
        "params": [
          {
            "name": "query",
            "type": "stdICallable<(stdAcc,depth)=>EAccFindResult>",
            "description": "Callback returning `EAccFindResult` options:",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "searchType",
            "type": "EAccFindType=EAccFindType.DepthFirst",
            "description": "The type of search, either Breadth First Search (BFS) or Depth First Search (DFS).",
            "optional": true,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " Collection<stdAcc> ",
          "description": "Collection of elements found.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "DoDefaultAction",
        "description": " Performs the default action of the `IAccessible` object\r\n",
        "remarks": [],
        "examples": [
          " `app.getButton().DoDefaultAction()`\r\n"
        ],
        "params": [],
        "returns": null,
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "SendMessage",
        "description": " Sends a message to the window\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "Msg",
            "type": "Long",
            "description": "Message to send",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "wParam",
            "type": "Long",
            "description": "WParam to send",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "lParam",
            "type": "Long",
            "description": "LParam to send",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " Long ",
          "description": "Return value\r\n"
        },
        "deprecation": {
          "status": true,
          "message": " Use `stdWindow#SendMessage()` instead.\r\n"
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "PrintChildTexts",
        "description": " Print the text of all child elements. Useful for debugging.\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": null,
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "PrintDescTexts",
        "description": " Prints all descendent texts. Useful for debugging. Also includes all paths of all descendents which can be very beneficial.\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "sToFilePath",
            "type": "string",
            "description": "File path to dump text to.",
            "optional": true,
            "defaultValue": "\"\"",
            "paramArray": false
          },
          {
            "name": "bPrintToDebug",
            "type": "boolean",
            "description": "Whether to print output to debug window or not.",
            "optional": true,
            "defaultValue": "true",
            "paramArray": false
          },
          {
            "name": "sPath",
            "type": "String",
            "description": "Prefix path (sometimes you might wnat to use Me.getPath(...))",
            "optional": true,
            "defaultValue": "\"P\"",
            "paramArray": false
          },
          {
            "name": "fileNum",
            "type": "long",
            "description": "Filenum to output too, typically this will be left unprovided",
            "optional": true,
            "defaultValue": "0",
            "paramArray": false
          }
        ],
        "returns": null,
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "getPath",
        "description": " Returns the path to an element\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "toAccessible",
            "type": "stdAcc",
            "description": "Stop creating path at this element",
            "optional": true,
            "defaultValue": "Nothing",
            "paramArray": false
          }
        ],
        "returns": {
          "type": " String ",
          "description": "String representing path to element from either Desktop or toAccessible.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "toJSON",
        "description": " Returns this element and all descendents as a JSON string. Useful for debugging\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " String ",
          "description": "JSON representation of element tree\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "AwaitForElement",
        "description": " Await for the existence of an element which meets a specified condition.\r\n",
        "remarks": [
          " calls `Me.FindFirst(awaitFor)` to wait for chosen element\r\n"
        ],
        "examples": [],
        "params": [
          {
            "name": "awaitFor",
            "type": "stdICallable<(stdAcc)=>Boolean>",
            "description": "If this callback returns true, the function will immediately set the result of the function to the awaited element, otherwise will continue awaiting.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "error",
            "type": "stdICallable<(stdAcc)=>Boolean>",
            "description": "If this callback returns true, the function will immediately set the result of the function to `nothing`, oterwise will continue awaiting. If none is provided no error is checked.",
            "optional": true,
            "defaultValue": "Nothing",
            "paramArray": false
          },
          {
            "name": "timeout",
            "type": "Long",
            "description": "Timeout in seconds. Default = NoTimeout. When timeout is reached the return value of the function is `nothing`",
            "optional": true,
            "defaultValue": "-1",
            "paramArray": false
          }
        ],
        "returns": {
          "type": " stdAcc                                  ",
          "description": "Element awaited for\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      }
    ],
    "properties": [
      {
        "name": "protAccessible",
        "access": "ReadWrite",
        "description": " The object which implements `IAccessible`, with which this class wraps. Please don't modify this object, unless you know what you are doing.\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " Object<IAccessible> ",
          "description": "The object which implements `IAccessible`\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": true
      },
      {
        "name": "Parent",
        "access": "ReadOnly",
        "description": " Return the parent of the IAccessible object\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " stdAcc ",
          "description": "Parent of this element\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "AncestralRoot",
        "access": "ReadOnly",
        "description": " Obtain the ancestral root of the IAccessible object (A child of the desktop)\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "Ancestral root of this element (child window of the desktop)\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "children",
        "access": "ReadOnly",
        "description": " Return the children of the IAccessible object\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " Collection<stdAcc> ",
          "description": "Children of this element\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "hwnd",
        "access": "ReadOnly",
        "description": " Return the hwnd of the IAccessible object\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " LongPtr ",
          "description": "hwnd of this element\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Identity",
        "access": "ReadOnly",
        "description": " Get a unique identifier for an element.\r\n",
        "remarks": [],
        "examples": [
          " `stdAcc.CreateFromMouse().Identity`\r\n"
        ],
        "params": [],
        "returns": {
          "type": " string ",
          "description": "Hex string identifier for element.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Location",
        "access": "ReadOnly",
        "description": " Return the location of the element as a collection\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " Collection<Long|stdAcc> ",
          "description": "The location of the element. Collection has 5 named keys: \"Width\", \"Height\", \"Left\", \"Top\" and \"Parent\". \"Parent\" refers to the element itself.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "HitTest",
        "access": "ReadOnly",
        "description": " Return the element under the specified location\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "x",
            "type": "Long",
            "description": "x coord",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "y",
            "type": "Long",
            "description": "y coord",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " stdAcc ",
          "description": "element under point\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "value",
        "access": "ReadWrite",
        "description": " Gets/Sets the value of the element\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " String ",
          "description": "the current value of the element\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "name",
        "access": "ReadOnly",
        "description": " Returns the name of the element\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " String ",
          "description": "the name of the element\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "DefaultAction",
        "access": "ReadOnly",
        "description": " Returns the description of the default action of the element\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " String ",
          "description": "the description of the default action of the element\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Role",
        "access": "ReadOnly",
        "description": " Returns the role of the element\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " String ",
          "description": "the role of the element\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "States",
        "access": "ReadOnly",
        "description": " Returns the state of the element\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " String ",
          "description": "the state of the element\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "StateData",
        "access": "ReadOnly",
        "description": " Returns the state(s) of the element\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " Long ",
          "description": "the state(s) of the element\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Description",
        "access": "ReadOnly",
        "description": " Returns the description of the element\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " String ",
          "description": "the description of the element\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "KeyboardShortcut",
        "access": "ReadOnly",
        "description": " Returns the keyboard shortcut used to trigger the default action of the element\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " String ",
          "description": "The keyboard shortcut used to trigger the default action of the element\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Focus",
        "access": "ReadWrite",
        "description": " Get the Focus of the UI element\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " Boolean ",
          "description": "Whether the element has focus\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Help",
        "access": "ReadOnly",
        "description": " Returns the help\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " String ",
          "description": "the help for the element\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "HelpTopic",
        "access": "ReadOnly",
        "description": " Returns the help topic\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "sFile",
            "type": "string",
            "description": "File to get help topic for",
            "optional": true,
            "defaultValue": "\"\"",
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "the help topic for the element\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Text",
        "access": "ReadOnly",
        "description": " Returns a string containing numerous properties from stdAcc concatenated together.\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " String ",
          "description": "Concatenation of Name, Value, DefaultAction, Description, Role, Help, HelpTopic and KeyboardShortcut.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      }
    ],
    "description": "",
    "remarks": [],
    "examples": [],
    "devNotes": [],
    "todos": [
      "VB6 complient, 32-Bit complient, 64-Bit complient",
      "Error in hwnd - AccessibleObjectFromWindow returns an E_FAIL code. Potentially related to https://stackoverflow.com/a/8617584/6302131",
      "Fallback identity",
      "Is this needed?"
    ],
    "constructors": [
      {
        "name": "CreateFromPoint",
        "description": " Creates an `stdAcc` object from an `X` and `Y` point location on the screen.\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "x",
            "type": "Long",
            "description": "X Coordinate",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "y",
            "type": "Long",
            "description": "Y Coordinate",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " stdAcc ",
          "description": "Object at the specified point\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CreateFromHwnd",
        "description": " Creates an `stdAcc` object from a window handle.\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "hwnd",
            "type": "LongPtr",
            "description": "Window handle to wrap",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " stdAcc ",
          "description": "stdAcc object for the window \r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CreateFromApplication",
        "description": " Creates an `stdAcc` object from the current running application (e.g. Excel / Word / Powerpoint).\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "oApp",
            "type": "Object",
            "description": "Application to create from. Defaults to `Application` if unspecified.",
            "optional": true,
            "defaultValue": "Nothing",
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "IAccessible wrapper around application window.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CreateFromDesktop",
        "description": " Creates an `stdAcc` object from the desktop.\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "IAccessible wrapper around desktop window.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CreateFromIAccessible",
        "description": " Creates an `stdAcc` object from an object which implements `IAccessible`.\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "obj",
            "type": "IAccessible",
            "description": "Object implementing `IAccessible` interface.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "IAccessible wrapper around an IAccessible object.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CreateFromMouse",
        "description": " Creates an `stdAcc` object for the element the mouse currently hovers over.\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "IAccessible wrapper around element under mouse.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CreateFromPath",
        "description": " Creates an `stdAcc` object for the element at a given path from the current element.\r\n",
        "remarks": [],
        "examples": [
          " `Debug.Print stdAcc.CreateFromApplication().CreateFromPath(\"3.1\").name`\r\n"
        ],
        "params": [
          {
            "name": "sPath",
            "type": "String",
            "description": "Path to element, e.g. \"P.1.2.3\" or \"1.2.3\". If starting with \"P.\" or \".\", these are ignored as they are taken as the current element.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "IAccessible wrapper from a supplied path.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "protInitWithProxy",
        "description": " Initialises an stdAcc object as a `Proxy` object, who's methods are implemented on the parent instead of on the element itself\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "oParent",
            "type": "stdAcc",
            "description": "Parent object to proxy",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "index",
            "type": "long",
            "description": "Index of element in parent",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": null,
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": true
      }
    ],
    "events": [],
    "implements": [
      "IDispatch"
    ]
  },
  {
    "name": "stdArray",
    "fileName": "stdArray.cls",
    "methods": [
      {
        "name": "Create",
        "description": " Create a `stdArray` object from params\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "params",
            "type": "Variant",
            "description": "The items of the array",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " stdArray<variant> ",
          "description": "A `stdArray` from the parameters.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CreateWithOptions",
        "description": " Create a `stdArray` object from params\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "iInitialLength",
            "type": "Long",
            "description": "The length of the initial private array created",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "iChunking",
            "type": "Long",
            "description": "The number of items the private array is increased by when required.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "params",
            "type": "Variant",
            "description": "The items of the array",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " stdArray<variant> ",
          "description": "A `stdArray` from the parameters.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CreateFromArray",
        "description": " Create a `stdArray` object from a VBA array\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "arr",
            "type": "Variant",
            "description": "Variant array to create a `stdArray` object from.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " stdArray<variant> ",
          "description": "Returns `stdArray` of variants. \r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CreateFromCollection",
        "description": " Create a `stdArray` object from a collection\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "col",
            "type": "Collection",
            "description": "Collection to create a `stdArray` object from.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " stdArray<variant> ",
          "description": "Returns `stdArray` of variants.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CreateFromString",
        "description": " Create an array by splitting a string\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "sHaystack",
            "type": "string",
            "description": "Haystack to split",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "sDelimiter",
            "type": "string",
            "description": "Delimiter",
            "optional": true,
            "defaultValue": "\"",
            "paramArray": false
          }
        ],
        "returns": {
          "type": " stdArray<String> ",
          "description": "A list of strings\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "protInit",
        "description": " Initialise array\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "iInitialLength",
            "type": "Long",
            "description": "The length of the initial private array created",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "iChunking",
            "type": "Long",
            "description": "The number of items the private array is increased by when required.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": null,
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": true
      },
      {
        "name": "AsCollection",
        "description": " Obtain a collection from the data contained within the array. Primarily used for NewEnum() method.\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " Collection ",
          "description": "Collection from Array\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Resize",
        "description": " Resize the array to a length\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "iLength",
            "type": "Long",
            "description": "The length of the desired array",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": null,
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Rechunk",
        "description": " Rechunk the private array to the length / number of items.\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": null,
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": true
      },
      {
        "name": "Sort",
        "description": " Sort the array\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "cbSortBy",
            "type": "stdICallable<(variant)=>variant>",
            "description": "A mapping function which should map whatever the input is to whatever variant the array should be sorted on.",
            "optional": true,
            "defaultValue": "Nothing",
            "paramArray": false
          },
          {
            "name": "cbComparrason",
            "type": "stdICallable<(variant,variant)=>boolean>",
            "description": "Comparrison function which consumes 2 variants and generates a boolean. See implementation of `Sort_QuickSort` for details.",
            "optional": true,
            "defaultValue": "Nothing",
            "paramArray": false
          },
          {
            "name": "iAlgorithm",
            "type": "Long",
            "description": "Currently only 1 algorithm: 0 - Quicksort",
            "optional": true,
            "defaultValue": "0",
            "paramArray": false
          },
          {
            "name": "bSortInPlace",
            "type": "Boolean",
            "description": "Sort the array in place. Sorting in-place is prefferred if possible as it is much more performant.",
            "optional": true,
            "defaultValue": "False",
            "paramArray": false
          }
        ],
        "returns": {
          "type": " stdArray                                                ",
          "description": "A sorted array\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Push",
        "description": " Add an element to the end of the array\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "el",
            "type": "Variant",
            "description": "The element to add to the end of the array.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "A reference to the array to allow chaining.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Pop",
        "description": " Remove an element from the end of the array\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "The element removed from the array\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Remove",
        "description": " Remove the ith element from the array\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "index",
            "type": "Long",
            "description": "Index of the element to remove",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "The element removed\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Shift",
        "description": " Remove and return the first element from the array\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "Element removed\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Unshift",
        "description": " Add an element to the start of the array\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "val",
            "type": "Variant",
            "description": "Value to append to the start of the array",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "A reference to the array to allow chaining.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Slice",
        "description": " Obtain a slice of the array\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "iStart",
            "type": "Long",
            "description": "Start index of the slice",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "iEnd",
            "type": "Long",
            "description": "End index of the slice",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "A slice of the array\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "SplitToChunks",
        "description": " Split an array into chunks of a specified size\r\n",
        "remarks": [],
        "examples": [
          " ```vba\r\n"
        ],
        "params": [
          {
            "name": "Size",
            "type": "Long",
            "description": "the size of the new internal arrays to create",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "An array of arrays at a specified size\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Splice",
        "description": " Splice the array\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "iStart",
            "type": "Long",
            "description": "Start index of the splice",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "iDeleteCount",
            "type": "Long",
            "description": "Number of elements to delete",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "newElements",
            "type": "stdArray",
            "description": "Elements to add to the array",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "An array containing the deleted elements\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Clone",
        "description": " Creates a new instance of the same array\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "A new instance of the same array\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Reverse",
        "description": " Returns a new array with all elements in reverse order\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "A new array with all elements in reverse order\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Concat",
        "description": " Concatenate an existing array of elements onto the end of this array\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "arr",
            "type": "stdArray",
            "description": "Array whose elements we wish to append to the end of this array",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "New composite array.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Join",
        "description": " Join each of the elements of this array together as a string\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "delimiter",
            "type": "String",
            "description": "Delimiter to insert between strings",
            "optional": true,
            "defaultValue": "\"",
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "A string containing all elements of the array joined together with the delimiter\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "PutItem",
        "description": " Copy a variant into the array's ith element. This saves from having to test the item and call the correct `set` keyword\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "i",
            "type": "long",
            "description": "The index at which the item's data should be set",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "item",
            "type": "Variant",
            "description": "Item to set at the index",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": null,
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "indexOf",
        "description": " Obtain the index of an element\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "el",
            "type": "Variant",
            "description": "Element to find",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "start",
            "type": "long",
            "description": "Location to start search for element.",
            "optional": true,
            "defaultValue": "1",
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "Index of element\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "lastIndexOf",
        "description": " Obtain the last index of an element\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "el",
            "type": "Variant",
            "description": "Element to find",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "Last index of element\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "includes",
        "description": " Returns true if the array contains an item\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "el",
            "type": "Variant",
            "description": "Item to find",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "startFrom",
            "type": "long",
            "description": "Index to start search for item at. (Internally uses indexOf())",
            "optional": true,
            "defaultValue": "1",
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "True if the array contains the item\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "IsEvery",
        "description": " Check if all elements in the array pass a test\r\n",
        "remarks": [],
        "examples": [
          " `if incidents.IsEvery(cbValid) then ...`\r\n"
        ],
        "params": [
          {
            "name": "cb",
            "type": "stdICallable<(element: Variant)=>Boolean>",
            "description": "Callback to run on each element",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "True if all elements pass the test\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "IsSome",
        "description": " Check if any elements in the array pass a test\r\n",
        "remarks": [],
        "examples": [
          " `if incidents.IsSome(cbValid) then ...`\r\n"
        ],
        "params": [
          {
            "name": "cb",
            "type": "stdICallable<(element: Variant)=>Boolean>",
            "description": "Callback to run on each element",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "True if any elements pass the test\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "ForEach",
        "description": " Call a callback on each element of the array\r\n",
        "remarks": [],
        "examples": [
          " `incidents.ForEach(cbPrint)`\r\n"
        ],
        "params": [
          {
            "name": "cb",
            "type": "stdICallable<(element: Variant)=>Void>",
            "description": "Callback to run on each element",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": null,
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Map",
        "description": " Call a callback on each element of the array and return a new array with the results\r\n",
        "remarks": [],
        "examples": [
          " `incidents.Map(cbGetId)`\r\n"
        ],
        "params": [
          {
            "name": "cb",
            "type": "stdICallable<(element: Variant)=>Variant>",
            "description": "Callback to run on each element",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "A new array with the results of the callback\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Unique",
        "description": " Remove all non-unqiue elements from the array. Given some callback to generate a key for each element, this method will remove all elements which have the same key.\r\n",
        "remarks": [],
        "examples": [
          " `incidents.Unique(cbGetId)`\r\n"
        ],
        "params": [
          {
            "name": "cb",
            "type": "stdICallable<(element: Variant)=>Variant>",
            "description": "Callback to generate a key for each element",
            "optional": true,
            "defaultValue": "Nothing",
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "A new array with all non-unique elements removed\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Reduce",
        "description": " Executes a user-supplied \"reducer\" callback function on each element of the array, in order, passing in the return\r\n",
        "remarks": [],
        "examples": [
          " `values.Reduce(cbSum, 0)`\r\n"
        ],
        "params": [
          {
            "name": "cb",
            "type": "stdICallable<(accumulator: Variant, element: Variant) => Variant>",
            "description": "Reducer callback to run on each element",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "initialValue",
            "type": "Variant",
            "description": "Initial value to pass to the reducer callback",
            "optional": true,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "The final value returned by the reducer callback\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Filter",
        "description": " Filter the array based on a condition\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "cb",
            "type": "stdICallable<(element: Variant)=>Boolean>",
            "description": "Callback to run on each element. If the callback returns true, the element is included in the returned array.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "A new array containing only the elements which passed the filter\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Count",
        "description": " Count the number of elements in the array. If a callback is provided, the number of elements which pass the callback is returned.\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "cb",
            "type": "stdICallable<(element: Variant)=>Boolean>",
            "description": "Callback to run on each element. If the callback returns true, the element is included in the count.",
            "optional": true,
            "defaultValue": "nothing",
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "The number of elements in the array. If a callback is provided, the number of elements which pass the callback is returned.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "GroupBy",
        "description": " Group the elements of the array by some key generated by a callback\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "cb",
            "type": "stdICallable<(element: Variant)=>Variant>",
            "description": "Callback to run on each element. The return value of this callback is used as the key to group the elements by.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " Object<Dictionary<Variant, stdArray<Variant>>> ",
          "description": "The keys of the dictionary are the keys generated by the callback. The values of the dictionary are arrays containing the elements which were grouped by the key.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Max",
        "description": " Obtain the maximum value in the array\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "cb",
            "type": "stdICallable<(element: Variant)=>Variant>",
            "description": "Callback to run on each element. The return value of this callback is used to determine the maximum value.",
            "optional": true,
            "defaultValue": "nothing",
            "paramArray": false
          },
          {
            "name": "startingValue",
            "type": "Variant",
            "description": "The starting value to compare against. If not provided, the first element of the array is used.",
            "optional": true,
            "defaultValue": "Empty",
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "The maximum value in the array\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Min",
        "description": " Obtain the minimum value in the array\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "cb",
            "type": "stdICallable<(element: Variant)=>Variant>",
            "description": "Callback to run on each element. The return value of this callback is used to determine the minimum value.",
            "optional": true,
            "defaultValue": "nothing",
            "paramArray": false
          },
          {
            "name": "startingValue",
            "type": "Variant",
            "description": "The starting value to compare against. If not provided, the first element of the array is used.",
            "optional": true,
            "defaultValue": "Empty",
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "The minimum value in the array\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      }
    ],
    "properties": [
      {
        "name": "NewEnum",
        "access": "ReadOnly",
        "description": " For-each compatibility\r\n",
        "remarks": [],
        "examples": [
          " `For each obj in myEnum: ... : next`\r\n"
        ],
        "params": [],
        "returns": {
          "type": " IEnumVARIANT ",
          "description": "An enumerator with methods enumNext, enumRefresh etc.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": true
      },
      {
        "name": "Length",
        "access": "ReadOnly",
        "description": " Obtain the length of the array\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " Long ",
          "description": "Length of the array\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "zProxyLength",
        "access": "ReadOnly",
        "description": " Obtain the length of the private array which stores the data of this array class\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " Long ",
          "description": "Length of the private array\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": true
      },
      {
        "name": "arr",
        "access": "ReadWrite",
        "description": " Obtain the array as a regular VBA array\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " Variant ",
          "description": "A VBA array\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "item",
        "access": "ReadWrite",
        "description": " Get/Let/Set item\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "i",
            "type": "long",
            "description": "The location to get/set the item",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "The item at the location\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      }
    ],
    "description": "",
    "remarks": [],
    "examples": [],
    "devNotes": [],
    "todos": [
      "Need to find a better more low level approach to creating arrays from existing arrays/preventing redim for methods like this"
    ],
    "constructors": [],
    "events": [
      {
        "name": "BeforeArrLet",
        "description": "",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "arr",
            "type": "stdArray",
            "description": "A reference to this array",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "arr2",
            "type": "variant",
            "description": "The array which is being assigned to this array",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "devNotes": [],
        "todos": []
      },
      {
        "name": "AfterArrLet",
        "description": "",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "arr",
            "type": "stdArray",
            "description": "A reference to this array",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "arr2",
            "type": "variant",
            "description": "The array which is being assigned to this array",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "devNotes": [],
        "todos": []
      },
      {
        "name": "BeforeAdd",
        "description": "",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "arr",
            "type": "stdArray",
            "description": "A the array to which the item is being added",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "iIndex",
            "type": "Long",
            "description": "The index at which the item will be added",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "item",
            "type": "Variant",
            "description": "The item which will be added",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "cancel",
            "type": "Boolean",
            "description": "Set to true to cancel the addition",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "devNotes": [],
        "todos": []
      },
      {
        "name": "AfterAdd",
        "description": "",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "arr",
            "type": "stdArray",
            "description": "A the array to which the item has been added to.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "iIndex",
            "type": "long",
            "description": "The index at which the item was added",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "item",
            "type": "variant",
            "description": "The item which was be added",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "devNotes": [],
        "todos": []
      },
      {
        "name": "BeforeRemove",
        "description": "",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "arr",
            "type": "stdArray",
            "description": "A the array from which the item is being removed",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "iIndex",
            "type": "long",
            "description": "The index at which the item will be removed",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "item",
            "type": "variant",
            "description": "The item which will be removed",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "cancel",
            "type": "Boolean",
            "description": "Set to true to cancel the removal",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "devNotes": [],
        "todos": []
      },
      {
        "name": "AfterRemove",
        "description": "",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "arr",
            "type": "stdArray",
            "description": "A the array from which the item has been removed",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "iIndex",
            "type": "long",
            "description": "The index at which the item was removed",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "devNotes": [],
        "todos": []
      },
      {
        "name": "AfterClone",
        "description": "",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "clone",
            "type": "stdArray",
            "description": "A reference to the clone",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "devNotes": [],
        "todos": []
      },
      {
        "name": "AfterCreate",
        "description": "",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "arr",
            "type": "stdArray",
            "description": "A reference to the array",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "devNotes": [],
        "todos": []
      }
    ],
    "implements": []
  },
  {
    "name": "stdCOM",
    "fileName": "stdCOM.cls",
    "methods": [
      {
        "name": "unkQueryInterface",
        "description": " Call `IUnknown::QueryInterface` on the object\r\n",
        "remarks": [],
        "examples": [
          " ```\r\n  'Get ITypeInfo\r\n"
        ],
        "params": [
          {
            "name": "sIID",
            "type": "String",
            "description": "Interface Identifier as string",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "`stdCOM` object for interface\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "unkAddRef",
        "description": " Call `IUnknown::AddRef()`\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": null,
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "unkRelease",
        "description": " Call IUnknown::Release()\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": null,
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "QueryKnownInterface",
        "description": " Query the object for a known interface.\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "interface",
            "type": "EKnownInterfaces",
            "description": "Known interface to query for",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "interface queried.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "RegisterActiveObject",
        "description": " Register the object held in stdCOM to the ROT as a CLSID or ProgID\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "sCLSID",
            "type": "String",
            "description": "CLSID if required. If this arg isn't provided, a ProgID must be provided.",
            "optional": true,
            "defaultValue": "\"\"",
            "paramArray": false
          },
          {
            "name": "ProgID",
            "type": "String",
            "description": "ProgID if required. If this arg isn't provided, a CLSID must be provided.",
            "optional": true,
            "defaultValue": "\"\"",
            "paramArray": false
          }
        ],
        "returns": null,
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "RevokeActiveObject",
        "description": " Revoke the previously registered object\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": null,
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CallVT",
        "description": " Call a function in the VTable of the object at a specified offset\r\n",
        "remarks": [],
        "examples": [
          " ```\r\n  "
        ],
        "params": [
          {
            "name": "VTableOffset",
            "type": "Long",
            "description": "The offset of the method to call. IUnknown::QueryInterface=0; IUnknown::AddRef=1; IUnknown::Release=2; IDispatch::Invoke=6",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "ReturnType",
            "type": "VbVarType",
            "description": "Return value of function, typically Long (HResult) for COM Object calls",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "FunctionParameters",
            "type": "Array<Variant>",
            "description": "Arguments to send to function.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": "                                    ",
          "description": "Return value of function\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      }
    ],
    "properties": [
      {
        "name": "Object",
        "access": "ReadOnly",
        "description": " Obtain raw object from stdCOM wrapper\r\n",
        "remarks": [],
        "examples": [
          " `stdCOM.Create(Application).Object.Name`\r\n",
          " `stdCOM.CreateFromPtr(ObjPtr(Application)).Object.Name`\r\n"
        ],
        "params": [],
        "returns": {
          "type": " ",
          "description": "Raw object\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "AsObject",
        "access": "ReadOnly",
        "description": " Obtain raw object from stdCOM wrapper\r\n",
        "remarks": [],
        "examples": [
          " `stdCOM.Create(Application).Object.Name`\r\n",
          " `stdCOM.CreateFromPtr(ObjPtr(Application)).Object.Name`\r\n"
        ],
        "params": [],
        "returns": {
          "type": " ",
          "description": "`IDispatch` for object\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Pointer",
        "access": "ReadOnly",
        "description": " Obtain pointer as LongPtr (VBA)/Long (VB6)\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "Pointer to object\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "TypeInfo",
        "access": "ReadOnly",
        "description": " Obtain Type Information from object\r\n",
        "remarks": [],
        "examples": [
          " `myCom.TypeInfo.CallVT(EITypeInfo.GetTypeAttr, vbLong, VarPtr(lPtr))`\r\n"
        ],
        "params": [],
        "returns": {
          "type": " stdCOM<ITypeInfo> ",
          "description": "TypeInfo structure for this object\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "InterfaceInfo",
        "access": "ReadOnly",
        "description": " Obtain all properties and methods of an object via it's TypeInfo\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " Collection<Array<string, vbCallType, long, long>> ",
          "description": "Collection of arrays containing Method/Property name, CallType, Index in type info and DispID\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Methods",
        "access": "ReadOnly",
        "description": " Obtain a collection of all method names on an object\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " Collection<string> ",
          "description": "Collection of method names\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Properties",
        "access": "ReadOnly",
        "description": " Obtain a collection of all property names on an object\r\n",
        "remarks": [],
        "examples": [
          " ```\r\n  "
        ],
        "params": [
          {
            "name": "bIncludeReadWriteType",
            "type": "Boolean",
            "description": "Include GET/LET/SET/UNK prefixes representing call conv",
            "optional": true,
            "defaultValue": "False",
            "paramArray": false
          }
        ],
        "returns": {
          "type": " Collection<string> ",
          "description": "Collection of property names\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      }
    ],
    "description": "",
    "remarks": [],
    "examples": [],
    "devNotes": [],
    "todos": [
      "Analyse and add anything missing from:"
    ],
    "constructors": [
      {
        "name": "Create",
        "description": " Create from an object\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "obj",
            "type": "IUnknown",
            "description": "Object to create raw COM object from",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "A wrapper around a raw COM object\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CreateFromPtr",
        "description": " Create from a pointer\r\n",
        "remarks": [
          " Specifically this function reuires a `*Interface` pointer. E.G. `*IUnknown`/`*IDispatch`/`*ITypeInfo`. If your DLL function provides a `[out] **Interface` object the\r\n"
        ],
        "examples": [],
        "params": [
          {
            "name": "ptr",
            "type": "LongPtr",
            "description": "Object pointer to wrap in a raw COM object",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "A wrapper around a raw COM object\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CreateFromActiveObjects",
        "description": " Create `stdCOM` objects from existing objects in the RunningObjectTable (ROT)\r\n",
        "remarks": [
          " This function is heavily inspired off code provided by `Jaafar Tribak`\r\n"
        ],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "A collection of `stdCOM` objects\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [
          " stdCOM objects will auto-release when not needed\r\n"
        ],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CreateFromWinRTClassID",
        "description": " Create `stdCOM` object from WinRT Activatable ClassID.\r\n",
        "remarks": [],
        "examples": [
          " `stdCOM.CreateFromWinRTClassID(\"Windows.Storage.Pickers.FolderPicker\")`\r\n"
        ],
        "params": [
          {
            "name": "sActivatableClassId",
            "type": "string",
            "description": "An activatable WinRT class ID.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "A COM wrapper for the object.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CreateFromClassAndIID",
        "description": " Create `stdCOM` object from a CLSID and IID.\r\n",
        "remarks": [],
        "examples": [
          " ```\r\n  "
        ],
        "params": [
          {
            "name": "sClassID",
            "type": "String",
            "description": "A CLSID as a string.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "sIID",
            "type": "String",
            "description": "An IID as a string. Default is `IDispatch`.",
            "optional": true,
            "defaultValue": "\"00020400-0000-0000-C000-000000000046\"",
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "A COM wrapper for the object.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      }
    ],
    "events": [],
    "implements": []
  },
  {
    "name": "stdCallback",
    "fileName": "stdCallback.cls",
    "methods": [
      {
        "name": "Bind",
        "description": " Bind a parameter to the function. Bound parameters are bound to the left of the passed parameters.\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "params",
            "type": "Array<Variant>",
            "description": "The parameters to bind to the function",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": "                        ",
          "description": "A new callback with the parameters bound\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "BindEx",
        "description": " Bind a parameter to the function. Bound parameters are bound to the left of the passed parameters.\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "params",
            "type": "Variant<Array<Variant>>",
            "description": "The parameters to bind to the function",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": "                        ",
          "description": "A new callback with the parameters bound\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Run",
        "description": " Run the function\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "params",
            "type": "Variant",
            "description": "The parameters to run the function with",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": "      ",
          "description": "The result of the function\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "RunEx",
        "description": " Run the function with a array of parameters\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "vArr",
            "type": "Variant<Array<Variant>>",
            "description": "The parameters to run the function with",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": "                                 ",
          "description": "The result of the function\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      }
    ],
    "properties": [],
    "description": "",
    "remarks": [],
    "examples": [],
    "devNotes": [],
    "todos": [
      "Use fancy accessor mechanism https://codereview.stackexchange.com/questions/274532/low-level-vba-hacking-making-private-functions-public "
    ],
    "constructors": [
      {
        "name": "Create",
        "description": " Create a callback object from module type string, translate to enum and initialise callback\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "mType",
            "type": "String",
            "description": "The type of module to create the callback from. Can be either \"Module\" or \"Object\"",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "Parent",
            "type": "Variant<String|Object>",
            "description": "The parent object to create the callback from. If mType is \"Module\" then this should be a string, otherwise it should be an object.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "name",
            "type": "String",
            "description": "The name of the method to create the callback from.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "cType",
            "type": "Integer",
            "description": "The call type to use when calling the method. Defaults to VbCallType.VbMethod",
            "optional": true,
            "defaultValue": "VbCallType.VbMethod",
            "paramArray": false
          }
        ],
        "returns": {
          "type": "                                ",
          "description": "A 1st class callback function object\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CreateFromModule",
        "description": " Create callback from Module function directly\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "sParentName",
            "type": "String",
            "description": "The name of the module to create the callback from.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "sMethodName",
            "type": "String",
            "description": "The name of the method to create the callback from.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": "           ",
          "description": "A 1st class callback function object\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CreateFromWorkbookModule",
        "description": " Create callback from Workbook module function directly\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "sWorkbookPath",
            "type": "string",
            "description": "The path of the workbook to create the callback from.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "sModuleName",
            "type": "string",
            "description": "The name of the module to create the callback from.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "sMethodName",
            "type": "string",
            "description": "The name of the method to create the callback from.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": "             ",
          "description": "A 1st class callback function object\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CreateFromObjectMethod",
        "description": " Create callback from object and method name\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "object",
            "type": "Object",
            "description": "The object to create the callback from.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "sMethodName",
            "type": "String",
            "description": "The name of the method to create the callback from.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": "           ",
          "description": "A 1st class callback function object\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CreateFromObjectProperty",
        "description": " Create callback from object and property name\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "object",
            "type": "Object",
            "description": "The object to create the callback from.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "sPropName",
            "type": "String",
            "description": "The name of the property to create the callback from.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "cType",
            "type": "VbCallType",
            "description": "The call type to use when calling the method. Defaults to VbCallType.VbGet",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": "           ",
          "description": "A 1st class callback function object\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CreateFromPointer",
        "description": " Create callback from function pointer\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "MethodPointer",
            "type": "LongPtr",
            "description": "The address of the function to create the callback from.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "iRetType",
            "type": "VbVarType",
            "description": "The return type of the function to create the callback from.",
            "optional": true,
            "defaultValue": "0",
            "paramArray": false
          },
          {
            "name": "vParamTypes",
            "type": "Array<VbVarType>",
            "description": "The parameter types of the function to create the callback from.",
            "optional": true,
            "defaultValue": "Null",
            "paramArray": false
          }
        ],
        "returns": {
          "type": "                                 ",
          "description": "A 1st class callback function object\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      }
    ],
    "events": [
      {
        "name": "BeforeRun",
        "description": "",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "callback",
            "type": "stdCallback",
            "description": "The callback object that is about to be run",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "args",
            "type": "Variant",
            "description": "The arguments that will be passed to the callback. This can be modified by listeners.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "devNotes": [],
        "todos": []
      },
      {
        "name": "AfterRun",
        "description": "",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "callback",
            "type": "stdCallback",
            "description": "The callback object that has just been run",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "result",
            "type": "Variant",
            "description": "The result of the callback. This can be modified by listeners.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "devNotes": [],
        "todos": []
      }
    ],
    "implements": [
      "stdICallable"
    ]
  },
  {
    "name": "stdClipboard",
    "fileName": "stdClipboard.cls",
    "methods": [
      {
        "name": "Await",
        "description": " Waits for the clipboard to be available\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": null,
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Clear",
        "description": " Clears the clipboard\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": null,
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "IsFormatAvailable",
        "description": " Check whether a given format is available based on the clipboards current data.\r\n",
        "remarks": [
          " - Formats which are technically \"available\" but have 0 bytes in size will return false.\r\n"
        ],
        "examples": [],
        "params": [
          {
            "name": "iFormat",
            "type": "CLIPFORMAT",
            "description": "The format to check support for.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "`True` if the format is allowed, `false` otherwise\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "FormatSize",
        "description": " Get the size in bytes of a particular format\r\n",
        "remarks": [
          " - CF_BITMAP and CF_ENHMETAFILE may be different due to the nature of obtaining their value via stdPicture\r\n"
        ],
        "examples": [],
        "params": [
          {
            "name": "format",
            "type": "CLIPFORMAT",
            "description": "The format to retrieve",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "The number of bytes being the size of the format.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "RegisterFormat",
        "description": " Register a clipboard format and/or return it's identifier if already present.\r\n",
        "remarks": [],
        "examples": [
          " ```vb\r\n",
          " ```vb\r\n"
        ],
        "params": [
          {
            "name": "sFormatName",
            "type": "string",
            "description": "Name of format to obtain",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "Clipboard format identifier\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "SetFilesArr",
        "description": " Set the clipboard to a selection of Files passed in as an array\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "vFiles",
            "type": "Variant<Array<Variant>>",
            "description": "A set of files as an array",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": null,
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "protSetFilesText",
        "description": " Internal method for setting the clipboard to a selection of Files passed in as a raw file string\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "sFiles",
            "type": "String",
            "description": "Files string delimited by vbNullChar and ending in 2x vbNullChar",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": null,
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": true
      },
      {
        "name": "protGetFilesArr",
        "description": " Get the file paths of files stored on the clipboard\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " Array<String> ",
          "description": "The array of file paths stored in the clipboard\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": true
      },
      {
        "name": "SendPaste",
        "description": " Raise a paste event to a window with handle hWnd\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "hwnd",
            "type": "LongPtr",
            "description": "Window to send paste event to",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": null,
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "SendCopy",
        "description": " Raise a copy event to a window with handle hWnd\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "hwnd",
            "type": "LongPtr",
            "description": "Window to send copy event to",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": null,
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "GetClipFormatFromCopyPictureFormat",
        "description": " Converts xlCopyPictureFormat to CLIPFORMAT\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "CopyPictureFormat",
            "type": "Long",
            "description": "The xlCopyPictureFormat to convert",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " CLIPFORMAT ",
          "description": "The CLIPFORMAT to use\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      }
    ],
    "properties": [
      {
        "name": "ClipboardID",
        "access": "ReadOnly",
        "description": " Get the ID of the current clipboard value\r\n",
        "remarks": [
          " - This is incremented every time the clipboard changes. It can be used to track and identify when the clipboard has changed.\r\n"
        ],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "The latest clipboard ID / sequence number\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "value",
        "access": "ReadWrite",
        "description": " Get or set the value of the current\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "iFormat",
            "type": "CLIPFORMAT",
            "description": "The format to get/set the value of",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " Variant ",
          "description": "The value stored in the clipboard\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "text",
        "access": "ReadWrite",
        "description": " Get or set the clipboard as/to a string\r\n",
        "remarks": [],
        "examples": [
          " ```vb\r\n"
        ],
        "params": [],
        "returns": {
          "type": " String ",
          "description": "The string stored on the clipboard\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "formats",
        "access": "ReadOnly",
        "description": " Obtain the available formats as a Collection of strings\r\n",
        "remarks": [
          " see `stdClipboard::formatIDs()` to get ids used in Value() from these data.\r\n"
        ],
        "examples": [],
        "params": [],
        "returns": {
          "type": " Collection<String> ",
          "description": "The format names you can use for the current clipboard data.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "formatIDs",
        "access": "ReadOnly",
        "description": " Obtain the available format IDs which can be used with value() function\r\n",
        "remarks": [
          " See `stdClipboard::formats()` to get the corresponding names from these data.\r\n"
        ],
        "examples": [],
        "params": [],
        "returns": {
          "type": " Collection<Long> ",
          "description": "Formats allowed. We use Collection for easy enumeration with stdEnumerator.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Picture",
        "access": "ReadWrite",
        "description": " Get/Set the clipboard as/to an IPicture object\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "The picture stored on the clipboard\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "XLPicture",
        "access": "WriteOnly",
        "description": " Set the clipboard to an Excel picture object, and then proceeds to wait until the format is available.\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "iAppearance",
            "type": "XlPictureAppearance",
            "description": "xlPrint or xlScreen",
            "optional": true,
            "defaultValue": "xlScreen",
            "paramArray": false
          },
          {
            "name": "iFormat",
            "type": "XlCopyPictureFormat",
            "description": "xlBitmap or xlPicture",
            "optional": true,
            "defaultValue": "xlBitmap",
            "paramArray": false
          },
          {
            "name": "xlPic",
            "type": "Excel.IPicture",
            "description": "The picture to copy",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": "Void",
          "description": ""
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "XLShapeAsPicture",
        "access": "WriteOnly",
        "description": " Copies a Excel shape as a picture, and then proceeds to wait until the format is available.\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "iAppearance",
            "type": "XlPictureAppearance",
            "description": "xlPrint or xlScreen",
            "optional": true,
            "defaultValue": "xlScreen",
            "paramArray": false
          },
          {
            "name": "iFormat",
            "type": "XlCopyPictureFormat",
            "description": "xlBitmap or xlPicture",
            "optional": true,
            "defaultValue": "XlCopyPictureFormat.xlBitmap",
            "paramArray": false
          },
          {
            "name": "xlShp",
            "type": "Excel.Shape",
            "description": "The shape to turn into an image",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": "Void",
          "description": ""
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "files",
        "access": "ReadWrite",
        "description": " Get or Set the clipboard to a selection of files paths. Paths provided as a collection for easy stdEnumerator wrapping.\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " Collection<String> ",
          "description": "The collection of file paths stored in the clipboard\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      }
    ],
    "description": "",
    "remarks": [],
    "examples": [],
    "devNotes": [],
    "todos": [
      "File is not fully complete, even though it has reached a stable state. Remaining tasks:",
      "Elsewhere not here:",
      "refactor away from using Excel specific functionality"
    ],
    "constructors": [],
    "events": [],
    "implements": []
  },
  {
    "name": "stdEnumerator",
    "fileName": "stdEnumerator.cls",
    "methods": [
      {
        "name": "enumNext",
        "description": " Get the next value in the dataset\r\n",
        "remarks": [],
        "examples": [
          " ```\r\n"
        ],
        "params": [
          {
            "name": "nextValue",
            "type": "Variant",
            "description": "The new value retrieved.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "`True` if a value was retrieved, `false` if the end of the enumerator has been reached.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "enumRefresh",
        "description": " Refresh the dataset to the beginning\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": null,
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "AsCollection",
        "description": " Get this enumerator as a collection\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "The enumerator's data as a collection\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "AsArray",
        "description": " Get this enumerator as an array\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "iType",
            "type": "vbVarType",
            "description": "The vartype of the array generated",
            "optional": true,
            "defaultValue": "vbVarType.vbVariant",
            "paramArray": false
          }
        ],
        "returns": {
          "type": " Array<T> ",
          "description": "The enumerator's data as an array\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "AsArray2D",
        "description": " Converts an enumerator of dictionaries to a 2D array\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " Array2d<Variant> ",
          "description": "2D Array of data including headers. Number of rows is equal to the length of the enumerator, number of columns is equal to the number of keys in the first item.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "AsDictionary",
        "description": " Returns the stored enumerator as a dictionary\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " Object<Dictionary> ",
          "description": "Dictionary containing enumerator data\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "ForEach",
        "description": " Calls the callback on each item of the enumerator\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "cb",
            "type": "stdICallable<(element: Variant)=>Void>",
            "description": "Callback to call for each item",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "This is the enumerator itself for chaining\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Map",
        "description": " Call callback `cb` on each item in the enumerator. Creates a new enumerator from each value returned from `cb`.\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "cb",
            "type": "stdICallable<(element: Variant)=>Variant>",
            "description": "Callback to map values to.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "Enumerator containing mapped values\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Filter",
        "description": " Returns a new enumerator containing all elements of `Me` for which the given callback returns `true`.\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "cb",
            "type": "stdICallable<(element: Variant)=>Boolean>",
            "description": "callback to test condition for",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "Enumerator containing all elements of `Me` for which the given callback returns `true`.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Sort",
        "description": " Sort the enumerator contents by the value retrieved by either the values in the enumerator or the values returned by `cb`.\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "cb",
            "type": "stdICallable<(element: Variant)=>Variant>",
            "description": "If a callback provided, sorts items based on values returned by the callback. Otherwise sorts items based on values in enumerator",
            "optional": true,
            "defaultValue": "nothing",
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "enumerator of sorted values\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Unique",
        "description": " Returns a new enumerator by removing duplicate values from `Me`.\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "cb",
            "type": "stdICallable<(element: Variant)=>Variant>",
            "description": "If a callback provided, filters out duplicate items based on values returned by the callback. Otherwise filters duplicate item based on their value.",
            "optional": true,
            "defaultValue": "nothing",
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "enumerator of unique values\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Reverse",
        "description": " Returns a new enumerator containing the reverse of the existing items in stdEnumerator.\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "enumerator of values in reverse order\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Concat",
        "description": " Concatenates to enumerators of values.\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "obj",
            "type": "stdEnumerator",
            "description": "Enumerator to concat with that of `me`.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "A concatenated array of values.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Join",
        "description": " Join the elements of the enumerator joint with a delimeter\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "sDelimiter",
            "type": "string",
            "description": "Enumerator to concat with that of `me`.",
            "optional": true,
            "defaultValue": "\"",
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "A concatenated array of values.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "indexOf",
        "description": " Find the index of an element\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "tv",
            "type": "variant",
            "description": "Element to find.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "Index of element.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "lastIndexOf",
        "description": " Find the last index of an element in the enumerator\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "tv",
            "type": "variant",
            "description": "Element to find",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "Last index of element.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "includes",
        "description": " Find whether an element is included in the enumerator\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "tv",
            "type": "variant",
            "description": "Element to find",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "`True` if element is found, else `false`.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "checkAll",
        "description": " Ensure that all elements in an enumerator satisfy a condition.\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "cb",
            "type": "stdICallable<(element: Variant)=>Boolean>",
            "description": "condition to check.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "`True` if all elements satisfy the condition, else `false`.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "checkAny",
        "description": " Ensure that any of the elements in an enumerator satisfy a condition.\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "cb",
            "type": "stdICallable<(element: Variant)=>Boolean>",
            "description": "condition to check.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "`True` if any element satisfies the condition, else `false`.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "checkNone",
        "description": " Ensure that none of the elements in an enumerator satisfy a condition.\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "cb",
            "type": "stdICallable<(element: Variant)=>Boolean>",
            "description": "condition to check.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "`True` if none of the elements satisfy the condition, else `false`.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "checkOnlyOne",
        "description": " Ensure that only one of the elements in an enumerator satisfy a condition.\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "cb",
            "type": "stdICallable<(element: Variant)=>Boolean>",
            "description": "condition to check.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "`True` if only one of the elements satisfy the condition, else `false`.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "reduce",
        "description": " The reduce() method executes a reducer function (that you provide) on each element of the array, resulting in single output value.\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "cb",
            "type": "stdICallable<(accumulator: variant, element: Variant, key: variant)=>Variant>",
            "description": "reducer function to execute.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "The reduced value.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "countBy",
        "description": " Count the number of times a condition is met\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "cb",
            "type": "stdICallable<(element: Variant)=>Boolean>",
            "description": "The callable to test for",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "The number of times a condition is met\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "groupBy",
        "description": " Group elements in stdEnumerator based on the value return by a callback\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "cb",
            "type": "stdICallable<(element: Variant)=>Boolean>",
            "description": "The callable which when run on an element returns the key to group by",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "Creates a dictionary, who's keys lead to `stdEnumerator`'s of elements matching that grouping.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "groupByEx",
        "description": " Returns a new enumerator containing groups from groupBy, with the key and item properties added\r\n",
        "remarks": [],
        "examples": [
          " ```\r\n",
          " ```\r\n'Get the largest count\r\n"
        ],
        "params": [
          {
            "name": "cb",
            "type": "stdICallable<(element: Variant)=>Variant>",
            "description": "The callable which when run on an element returns the key to group by",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " stdEnumerator<Object<Dictionary<key:string, item:variant>>> ",
          "description": "Enumerator containing grouped data\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "max",
        "description": " Obtains the maximum value from the enumerator. If a callback is given the item which returns the largest value from the callback is returned.\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "cb",
            "type": "stdICallable<(element: Variant)=>Variant>",
            "description": "If callback given, callback to obtain max value of. Else max of the elements values are found.",
            "optional": true,
            "defaultValue": "nothing",
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "Value containing max data\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "min",
        "description": " Obtains the minimum value from the enumerator. If a callback is given the item which returns the largest value from the callback is returned.\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "cb",
            "type": "stdICallable<(element: Variant)=>Variant>",
            "description": "If callback given, callback to obtain min value of. Else min of the elements values are found.",
            "optional": true,
            "defaultValue": "nothing",
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "Value containing min data\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "sum",
        "description": " Obtains the sum of the elements in an enumerator, or of the values returned by the callback.\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "cb",
            "type": "stdICallable<(element: Variant)=>Variant>",
            "description": "A callback returning an item to sum. If no callback supplied then the elements themselves will be summed",
            "optional": true,
            "defaultValue": "nothing",
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "The sum value\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Flatten",
        "description": " Flatten an enumerator of enumerators\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "A flattened enumerator (depth = 1)\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Cycle",
        "description": " Run the callback on an all of the items i times.\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "iTimes",
            "type": "long",
            "description": "Times to execute the cb on the collection",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "cb",
            "type": "stdICallable<(element: variant, key: variant)=>Void>",
            "description": "Callback to execute on each item",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": "  ",
          "description": "This object.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "FindFirst",
        "description": " Finds the first item which matches a certain condition\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "cb",
            "type": "stdICallable<(element: variant, key: variant)=>Boolean>",
            "description": "Callback to check whether item matches condition",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "ifMissing",
            "type": "variant",
            "description": "Value to return if missing",
            "optional": true,
            "defaultValue": "null",
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "Value found or value of isMissing if missing\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "First",
        "description": " Get the first `iCount` elements of the collection. Useful for testing\r\n",
        "remarks": [],
        "examples": [
          " `stdEnumerator.CreateFromArray(Array(1,2,3,4,5,6,7,8,9)).First(3).Join(\",\") '=>1,2,3`\r\n"
        ],
        "params": [
          {
            "name": "iCount",
            "type": "Long",
            "description": "The number of elements to retrieve",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "Enumerator containing the first `iCount` elements.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      }
    ],
    "properties": [
      {
        "name": "NewEnum",
        "access": "ReadOnly",
        "description": " For-each compatibility\r\n",
        "remarks": [],
        "examples": [
          " ```vb\r\n"
        ],
        "params": [],
        "returns": {
          "type": " IEnumVARIANT ",
          "description": "An enumerator with methods enumNext, enumRefresh etc.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": true
      },
      {
        "name": "Item",
        "access": "ReadOnly",
        "description": " Get the item at an index / key\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "index",
            "type": "Variant",
            "description": "An index / key of an element to obtain.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "byIndex",
            "type": "boolean",
            "description": "If true, then index of item is used, instead of potentially key.",
            "optional": true,
            "defaultValue": "false",
            "paramArray": false
          }
        ],
        "returns": {
          "type": "       ",
          "description": "Item returned at index/key\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Length",
        "access": "ReadOnly",
        "description": " Get the length of the enumerator\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "Length of enumerator.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      }
    ],
    "description": "",
    "remarks": [],
    "examples": [],
    "devNotes": [],
    "todos": [
      "Implement the following methods:",
      "Things we can't do (yet)",
      "LongPtr?",
      "Implement raw API for working with IEnumVARIANT:"
    ],
    "constructors": [
      {
        "name": "CreateFromCallable",
        "description": " Create an enumerator from a callable. Simply return either the next item, or null to indicate the end of the item set.\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "cb",
            "type": "stdICallable<(lastItem: variant,index: long)=> variant | null>",
            "description": "Callback which returns either the next item.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "iMaxLength",
            "type": "long",
            "description": "Maximum length of enumerator. The enumerator will refuse to go beyond this number of items.",
            "optional": true,
            "defaultValue": "1000000",
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "Enumerator created from callback function\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CreateFromCallableVerbose",
        "description": " Creates an enumerator from a callable. This is more complex than non-verbose callable, however offers full flexibility of the loop.\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "cb",
            "type": "ByVal stdICallable<(lastItem: variant,index: long)=>Array<Boolean,Long,Variant,Variant>>",
            "description": "Callback which returns an array. The array should be of the form:",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "iMaxLength",
            "type": "long",
            "description": "Maximum length of enumerator. The enumerator will refuse to go beyond this number of items. Used in order to prevent runaway processes.",
            "optional": true,
            "defaultValue": "1000000",
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "Enumerator created from callback function\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CreateFromArray",
        "description": " Create an enumerator from an array\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "v",
            "type": "variant",
            "description": "the Array to create the enumerator from.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "iMaxLength",
            "type": "long",
            "description": "Maximum length of enumerator. The enumerator will refuse to go beyond this number of items. Used in order to prevent runaway processes.",
            "optional": true,
            "defaultValue": "1000000",
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "An enumerator representing data in array\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CreateFromIEnumVariant",
        "description": " Create an enumerator from an object which supports IEnumVARIANT.\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "o",
            "type": "Object",
            "description": "the object to create the enumerator from. This object should support IEnumVARIANT",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "iMaxLength",
            "type": "long",
            "description": "Maximum length of enumerator. The enumerator will refuse to go beyond this number of items. Used in order to prevent runaway processes.",
            "optional": true,
            "defaultValue": "1000000",
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "An enumerator representing variants in the IEnumVARIANT\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CreateEmpty",
        "description": " Create an empty enumerator\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "iMaxLength",
            "type": "long",
            "description": "Maximum length of enumerator. The enumerator will refuse to go beyond this number of items. Used in order to prevent runaway processes.",
            "optional": true,
            "defaultValue": "1000000",
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "An empty enumerator\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CreateFromListObject",
        "description": " Create an enumerator from an Excel ListObject. Dictionaries are created for each ListRow with Header values as keys.\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "lo",
            "type": "ListObject",
            "description": "ListObject to create enumerator from.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "iMaxLength",
            "type": "Long",
            "description": "Maximum length of enumerator. The enumerator will refuse to go beyond this number of items. Used in order to prevent runaway processes.",
            "optional": true,
            "defaultValue": "1000000",
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "Enumerator representing ListObject data\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CreateFromTree",
        "description": " Create a stdEnumerator from a tree of objects\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "oRoot",
            "type": "Object",
            "description": "The parent / root node",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "getChildren",
            "type": "stdICallable",
            "description": "A callback which returns the children of each individual node.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "Flat enumerator of all objects in the tree.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CreateFromDictionaryEx",
        "description": " Translates a dictionary to a Enumerator of dictionaries with key and value properties.\r\n",
        "remarks": [],
        "examples": [
          " ```\r\n"
        ],
        "params": [
          {
            "name": "dictionary",
            "type": "object",
            "description": "The dictionary to create the enumerator from.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " stdEnumerator<Object<Scripting.Dictionary<key: string, value: variant>>> ",
          "description": "An enumerator representing the dictionary data\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "protInit",
        "description": " Initialse the stdEnumerator\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "iEnumeratorType",
            "type": "long",
            "description": "Enumerator type to create",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "iMaxLength",
            "type": "long",
            "description": "Maximum length of enumerator. The enumerator will refuse to go beyond this number of items. Used in order to prevent runaway processes.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "v",
            "type": "Variant",
            "description": "The data to create the enumerator from. This is either an array, a callable, or an IEnumVARIANT object.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": null,
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": true
      }
    ],
    "events": [],
    "implements": []
  },
  {
    "name": "stdFiber",
    "fileName": "stdFiber.cls",
    "methods": [
      {
        "name": "add",
        "description": " Add a step/sub-process to the fiber\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "processStep",
            "type": "stdICallable<(stdFiber)=>boolean>",
            "description": "Callback process / step, consumes the fiber parent, returns `true` if caller can proceed to next step. returns `false` otherwise.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "stepName",
            "type": "string",
            "description": "The name of the step. This can be used for resetting and error reporting purposes.",
            "optional": true,
            "defaultValue": "\"\"",
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "A fiber procedure - A reference to the fiber the step has been added to\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "addErrorHandler",
        "description": " Add an error handler to the fiber\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "handler",
            "type": "stdICallable<(stdFiber)=>void>",
            "description": "Callback to run when an error occurs in the fiber",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "A fiber procedure - A reference to the fiber the step has been added to, to allow chaining\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "addStepChangeHandler",
        "description": " Add a handler which is triggered at every step change\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "handler",
            "type": "stdICallable<(stdFiber)=>void>",
            "description": "Callback to run when an error occurs in the fiber",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "A fiber procedure - A reference to the fiber the step has been added to, to allow chaining\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Resolve",
        "description": " Usually called by a sub-process, this will mark the fiber procedure as finished, and return the passed result\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "vResult",
            "type": "variant",
            "description": "The result to return",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": null,
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Reset",
        "description": " Reset to a specific step\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "sName",
            "type": "string",
            "description": "Step name to jump to (if not specified, will reset to first step).",
            "optional": true,
            "defaultValue": "\"\"",
            "paramArray": false
          }
        ],
        "returns": null,
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "runFibers",
        "description": " Run a collection/stdArray/stdEnumerator of fiber procedures, across a number of concurrent running fiber runtimes, returning all results as a collection.\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "vFibers",
            "type": "Variant<Collection|Array|stdArray|stdEnumerator>",
            "description": "Fiber procedures to execute over",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "numAgents",
            "type": "Long",
            "description": "the number of fiber runtimes to create (or number of fiber procedures to run concurrently)",
            "optional": true,
            "defaultValue": "1",
            "paramArray": false
          },
          {
            "name": "agentInitCB",
            "type": "stdICallable<(agent as Object)=>void>",
            "description": "Called when an agent has been initialised. This is called only once per agent object. The agent environment is received as the parameter.",
            "optional": true,
            "defaultValue": "nothing",
            "paramArray": false
          },
          {
            "name": "agentDestroyCB",
            "type": "stdICallable<(agent as Object)=>void>",
            "description": "Called when an agent is about to be destroyed. This is called only once per agent object. The agent environment is received as the parameter. Typically used to cleanup.",
            "optional": true,
            "defaultValue": "nothing",
            "paramArray": false
          },
          {
            "name": "runtimeUpdateCB",
            "type": "stdICallable<(iFinishedCount as long, iFiberCount as long)=>void>",
            "description": "A callback to call every second to update on progress.",
            "optional": true,
            "defaultValue": "nothing",
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "Collection of results of ran fiber procedures. You can use the variant from param1 if you need to check for errors using ErrorText.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Cancel",
        "description": " Cancel the running fiber\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "errorText",
            "type": "String",
            "description": "If an error is required, set this parameter to whatever the text should be.",
            "optional": true,
            "defaultValue": "\"\"",
            "paramArray": false
          }
        ],
        "returns": null,
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      }
    ],
    "properties": [
      {
        "name": "ResetCount",
        "access": "ReadOnly",
        "description": " Obtain the number of times this fiber has reset.\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "The number of times this fiber has been reset.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Result",
        "access": "ReadOnly",
        "description": " Obtain the result of this fiber\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "The result of this fiber\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "ErrorText",
        "access": "ReadOnly",
        "description": " Obtain errors if any as string\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "The error text\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Meta",
        "access": "ReadOnly",
        "description": " Obtain the metadata object, usually used by the sub-process\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "The metadata object\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Step",
        "access": "ReadOnly",
        "description": " Obtain the current step which the fiber procedure is at.\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "The current step\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "StepName",
        "access": "ReadOnly",
        "description": " Obtains the name of the current step in the fiber\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "The name of the fiber step\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "StepDuration",
        "access": "ReadOnly",
        "description": " Obtains the duration of the fiber procedure\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "The duration of the fiber procedure in seconds\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "TotalDuration",
        "access": "ReadOnly",
        "description": " Obtains the duration of the fibers entire runtime\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "The duration of the fibers entire runtime in seconds\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "isFinished",
        "access": "ReadOnly",
        "description": " Obtains whether the fiber has finished or not\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "`True` if the fiber has finished, `False` otherwise\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Name",
        "access": "ReadOnly",
        "description": " Obtain the name of the fiber\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "The name of the fiber\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Agent",
        "access": "ReadOnly",
        "description": " Obtain the agent information I.E. information unique to the runtime running this fiber\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "The agent information. \r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      }
    ],
    "description": "",
    "remarks": [],
    "examples": [],
    "devNotes": [],
    "todos": [
      "Consider sectioning off data between runtime data TFiberRuntime (procStartTime, meta, agent, ...) and TFiberBuildTime (name, procsCount, procs)"
    ],
    "constructors": [
      {
        "name": "Create",
        "description": " Create a fiber\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "sName",
            "type": "string",
            "description": "The name of the fiber",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "A fiber procedure - a wrapper around a number of procedures used for concurrent programming.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      }
    ],
    "events": [],
    "implements": []
  },
  {
    "name": "stdHTTP",
    "fileName": "stdHTTP.cls",
    "methods": [
      {
        "name": "Create",
        "description": " Create a HTTP request\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "sURL",
            "type": "String",
            "description": "The url to query",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "RequestMethod",
            "type": "String",
            "description": "Typically \"GET\", \"POST\", \"PUT\", \"DELETE\", but can be any string which the server responds to",
            "optional": true,
            "defaultValue": "\"GET\"",
            "paramArray": false
          },
          {
            "name": "ThreadingStyle",
            "type": "EHTTPSynchronisity",
            "description": "The Threading approach. Either HTTPSync (Synchronous) or HTTPAsync (Asynchronous).",
            "optional": true,
            "defaultValue": "HTTPSync",
            "paramArray": false
          },
          {
            "name": "options",
            "type": "Object<Dictionary>",
            "description": "Use `stdHTTP.CreateOptions()` to generate these.",
            "optional": true,
            "defaultValue": "Nothing",
            "paramArray": false
          },
          {
            "name": "Authenticator",
            "type": "stdICallable<(HTTP: Object, RequestMethod: String, URL: String, ThreadingStyle: Long, options: Object)=>Void>",
            "description": "A callable object which will be called before the request is sent. This can be used to add authentication headers, etc.",
            "optional": true,
            "defaultValue": "Nothing",
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "A http request object\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CreateHeaders",
        "description": " Create HTTP request headers\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "v",
            "type": "Variant",
            "description": "Headers to load into the http request in the form key1, value1, key2, value2, ...",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " Object<Dictionary> ",
          "description": "A dictionary of headers\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CreateOptions",
        "description": " Create HTTP request options\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "Body",
            "type": "String",
            "description": "The body of the request",
            "optional": true,
            "defaultValue": "\"\"",
            "paramArray": false
          },
          {
            "name": "Headers",
            "type": "Object<Dictionary>",
            "description": "The headers of the request",
            "optional": true,
            "defaultValue": "Nothing",
            "paramArray": false
          },
          {
            "name": "Cookies",
            "type": "Object<Dictionary>",
            "description": "The cookies of the request",
            "optional": true,
            "defaultValue": "Nothing",
            "paramArray": false
          },
          {
            "name": "ContentTypeDefault",
            "type": "EHTTPContentType",
            "description": "The default content type of the request",
            "optional": true,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "Insecure",
            "type": "Boolean",
            "description": "Whether to ignore SSL errors",
            "optional": true,
            "defaultValue": "False",
            "paramArray": false
          },
          {
            "name": "EnableRedirects",
            "type": "Boolean",
            "description": "Whether to follow redirects",
            "optional": true,
            "defaultValue": "True",
            "paramArray": false
          },
          {
            "name": "TimeoutMS",
            "type": "Long",
            "description": "The timeout of the request in milliseconds",
            "optional": true,
            "defaultValue": "5000",
            "paramArray": false
          }
        ],
        "returns": {
          "type": " Object<Dictionary> ",
          "description": "A dictionary of options\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CreateProxy",
        "description": " Obtain proxy information\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "proxyType",
            "type": "EHTTPProxyType",
            "description": "",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "Server",
            "type": "string",
            "description": "the IP address (or hostname) of the proxy server",
            "optional": true,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "ByPass",
            "type": "String",
            "description": "A proxy bypass list is not always needed, but it's useful. It specifies URLs or IP ranges that should be accessed directly, bypassing the proxy. This is often used for local or intranet addresses.",
            "optional": true,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "User",
            "type": "string",
            "description": "Username for proxy server authentication",
            "optional": true,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "Pass",
            "type": "string",
            "description": "Password for proxy server authentication",
            "optional": true,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "Proxy information object\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Await",
        "description": " Await for the request to finish. This is only necessary for asynchronous requests.\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "The request/response object\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "URIEncode",
        "description": " Encode a string for use in a URL\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "strInput",
            "type": "String",
            "description": "The string to encode",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "The encoded string\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "URIDecode",
        "description": " Decode a string from a URL\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "strInput",
            "type": "String",
            "description": "The string to decode",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "The decoded string\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      }
    ],
    "properties": [
      {
        "name": "isFinished",
        "access": "ReadOnly",
        "description": " Get whether the request has finished. This is only necessary for asynchronous requests.\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "`True` if the request has finished, `False` otherwise.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "ResponseStatus",
        "access": "ReadOnly",
        "description": " Get the response status code\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "The response status code\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "ResponseStatusText",
        "access": "ReadOnly",
        "description": " Get the response status text\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "The response status text\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "ResponseText",
        "access": "ReadOnly",
        "description": " Get the response text\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "The response text\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "ResponseBody",
        "access": "ReadOnly",
        "description": " Get the response body\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "The response body\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "ResponseHeader",
        "access": "ReadOnly",
        "description": " Get a response header by name\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "sHeader",
            "type": "String",
            "description": "The name of the header to get",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "The response header\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "ResponseHeaders",
        "access": "ReadOnly",
        "description": " Get all response headers\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "All response headers\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "ResponseMapped",
        "access": "ReadOnly",
        "description": " Get the mapped response\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": "variant",
          "description": ""
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "ResponseMapper",
        "access": "ReadWrite",
        "description": " Get/Set the response mapper. This callback will run when ResponeMapped() is called. This would usually be used to convert the response to a JSON/XML VBA object.\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": "stdICallable",
          "description": ""
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      }
    ],
    "description": "",
    "remarks": [],
    "examples": [],
    "devNotes": [],
    "todos": [
      "Check if user/pass credentials with auto-proxy will ever be needed"
    ],
    "constructors": [],
    "events": [],
    "implements": []
  },
  {
    "name": "stdHTTPAuthenticators",
    "fileName": "stdHTTPAuthenticators.bas",
    "methods": [
      {
        "name": "WindowsAuthenticator",
        "description": " Authenticator will logon with Windows login credentials if requested\r\n",
        "remarks": [],
        "examples": [
          " `stdHTTP.Create(\"someURL\", Authenticator:=stdCallback.CreateFromModule(\"stdHTTPAuthenticators\", \"WindowsAuthenticator\"))`\r\n"
        ],
        "params": [
          {
            "name": "pHTTP",
            "type": "Object",
            "description": "The HTTP object from the stdHTTP.Create() call",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "RequestMethod",
            "type": "String",
            "description": "The HTTP method from the stdHTTP.Create() call",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "sURL",
            "type": "String",
            "description": "The URL from the stdHTTP.Create() call",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "ThreadingStyle",
            "type": "Long",
            "description": "The threading style from the stdHTTP.Create() call",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "options",
            "type": "Object",
            "description": "The options object from the stdHTTP.Create() call",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": null,
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "HttpBasicAuthenticator",
        "description": " Basic Authenticator. \r\n",
        "remarks": [
          " This authenticator will send the username and password in the clear. It is recommended to use this only over HTTPS.\r\n"
        ],
        "examples": [
          " `stdHTTP.Create(\"https://postman-echo.com/basic-auth\", Authenticator:=stdCallback.CreateFromModule(\"stdHTTPAuthenticators\", \"HttpBasicAuthenticator\").Bind(\"postman\", \"password\"))`\r\n"
        ],
        "params": [
          {
            "name": "Username",
            "type": "String",
            "description": "The username supplied by the user during Bind()",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "Password",
            "type": "String",
            "description": "The password supplied by the user during Bind()",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "pHTTP",
            "type": "Object",
            "description": "The HTTP object from the stdHTTP.Create() call",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "RequestMethod",
            "type": "String",
            "description": "The HTTP method from the stdHTTP.Create() call",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "sURL",
            "type": "String",
            "description": "The URL from the stdHTTP.Create() call",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "ThreadingStyle",
            "type": "Long",
            "description": "The threading style from the stdHTTP.Create() call",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "options",
            "type": "Object",
            "description": "The options object from the stdHTTP.Create() call",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": null,
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "TokenAuthenticator",
        "description": " Token Authenticator\r\n",
        "remarks": [],
        "examples": [
          " `stdHTTP.Create(\"https://postman-echo.com/basic-auth\", Authenticator:=stdCallback.CreateFromModule(\"stdHTTPAuthenticators\", \"TokenAuthenticator\").Bind(\"PRIVATE-TOKEN\", \"{{your-token}}\"))`\r\n"
        ],
        "params": [
          {
            "name": "HeaderName",
            "type": "String",
            "description": "The name of the header to set supplied by the user during Bind()",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "Token",
            "type": "String",
            "description": "The token to set the header to supplied by the user during Bind()",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "pHTTP",
            "type": "Object",
            "description": "The HTTP object from the stdHTTP.Create() call",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "RequestMethod",
            "type": "String",
            "description": "The HTTP method from the stdHTTP.Create() call",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "sURL",
            "type": "String",
            "description": "The URL from the stdHTTP.Create() call",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "ThreadingStyle",
            "type": "Long",
            "description": "The threading style from the stdHTTP.Create() call",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "options",
            "type": "Object",
            "description": "The options object from the stdHTTP.Create() call",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": null,
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "DigestAuthenticator",
        "description": " Digest Authenticator\r\n",
        "remarks": [],
        "examples": [
          " `stdHTTP.Create(\"https://postman-echo.com/digest-auth\", Authenticator:=stdCallback.CreateFromModule(\"stdHTTPAuthenticators\", \"DigestAuthenticator\").Bind(\"postman\", \"password\", \"postman-echo.com\"))`\r\n"
        ],
        "params": [
          {
            "name": "Username",
            "type": "String",
            "description": "The username supplied by the user during Bind()",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "Password",
            "type": "String",
            "description": "The password supplied by the user during Bind()",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "sDomain",
            "type": "String",
            "description": "The domain to authenticate against supplied by the user during Bind()",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "pHTTP",
            "type": "Object",
            "description": "The HTTP object from the stdHTTP.Create() call",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "RequestMethod",
            "type": "String",
            "description": "The HTTP method from the stdHTTP.Create() call",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "sURL",
            "type": "String",
            "description": "The URL from the stdHTTP.Create() call",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "ThreadingStyle",
            "type": "Long",
            "description": "The threading style from the stdHTTP.Create() call",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "options",
            "type": "Object",
            "description": "The options object from the stdHTTP.Create() call",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": null,
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      }
    ],
    "properties": [],
    "description": "",
    "remarks": [],
    "examples": [],
    "devNotes": [],
    "todos": []
  },
  {
    "name": "stdICallable",
    "fileName": "stdICallable.cls",
    "methods": [
      {
        "name": "Run",
        "description": " Run the function with supplied parameters\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "params",
            "type": "Variant",
            "description": "The parameters to run the function with",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": "      ",
          "description": "The result of the function\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "RunEx",
        "description": " Run the function with a array of parameters\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "params",
            "type": "Variant<Array<Variant>>",
            "description": "The parameters to run the function with",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": "                                 ",
          "description": "The result of the function\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Bind",
        "description": " Bind a set of parameters to the function call\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "params",
            "type": "Variant",
            "description": "The parameters to bind to the function",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": "      ",
          "description": "A new function with the parameters bound\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "SendMessage",
        "description": " Making late-bound calls to `stdICallable` members. Each object which implements `stdICallable`\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "sMessage",
            "type": "string",
            "description": "Message to send. Standard messages include \"obj\" returning the object, \"className\" returning the class name. Other messages are implementation specific.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "success",
            "type": "boolean",
            "description": "Whether the call was successful",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "params",
            "type": "variant",
            "description": "Any variant, typically parameters as an array. Passed along with the message.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "Any return value.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": true
      }
    ],
    "properties": [],
    "description": "",
    "remarks": [],
    "examples": [],
    "devNotes": [],
    "todos": [],
    "constructors": [],
    "events": [],
    "implements": []
  },
  {
    "name": "stdImage",
    "fileName": "stdImage.cls",
    "methods": [
      {
        "name": "CreateFromBinary",
        "description": " Creates a stdImage object from a byte array\r\n",
        "remarks": [],
        "examples": [
          " ```\r\n  "
        ],
        "params": [
          {
            "name": "b",
            "type": "Variant",
            "description": "Bytes of Bitmap/Jpeg/Png/... image",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "Picture object representing data\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CreateFromDataURL",
        "description": "",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": "stdImage",
          "description": ""
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CreateFromFile",
        "description": " Creates a stdImage object from a file\r\n",
        "remarks": [],
        "examples": [
          " `stdImage.CreateFromFile(\"H:\\test1.bmp\").ToFile(\"H:\\test1.png\")`\r\n"
        ],
        "params": [
          {
            "name": "sPath",
            "type": "String",
            "description": "Path of file",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "format",
            "type": "stdImgFormat",
            "description": "The format of the image",
            "optional": true,
            "defaultValue": "stdImgFormatDefault",
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "Picture object representing data\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CreateFromUrl",
        "description": " Creates a stdImage object from a url\r\n",
        "remarks": [
          " - TODO: consider removing\r\n"
        ],
        "examples": [
          " `stdImage.CreateFromURL(\"https://raw.githubusercontent.com/sancarn/awesome-vba/main/resources/VBALogo.png\").ToFile(\"H:\\test.png\", stdImgFormatPNG)`\r\n"
        ],
        "params": [
          {
            "name": "sURL",
            "type": "String",
            "description": "Url of file",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "format",
            "type": "stdImgFormat",
            "description": "The format of the image",
            "optional": true,
            "defaultValue": "stdImgFormatDefault",
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "Picture object representing data\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CreateFromHBitmap",
        "description": " Creates a stdImage object from a file\r\n",
        "remarks": [],
        "examples": [
          " ```\r\n  "
        ],
        "params": [
          {
            "name": "hBitmap",
            "type": "LongPtr",
            "description": "hBitmap (handle to Bitmap)",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "Picture object representing data\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CreateFromClipboard",
        "description": " Creates a stdImage from the image in the clipboard\r\n",
        "remarks": [],
        "examples": [
          " `stdImage.CreateFromClipboard().ToFile(\"H:\\test.png\", stdImgFormatPNG)`\r\n"
        ],
        "params": [],
        "returns": {
          "type": " ",
          "description": "Picture object representing data\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CreateFromIPictureDisp",
        "description": " Creates a stdImage object from a stdole.IPictureDisp object\r\n",
        "remarks": [],
        "examples": [
          " TODO:\r\n"
        ],
        "params": [
          {
            "name": "picture",
            "type": "stdole.IPictureDisp",
            "description": "Object to create picture from",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "Picture object representing data\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CreateFromStdPicture",
        "description": " Creates a stdImage object from a stdole.stdPicture object\r\n",
        "remarks": [],
        "examples": [
          " `stdImage.CreateFromStdPicture(Userform1.Picture).ToFile(\"H:\\test.png\", stdImgFormatPNG)`\r\n"
        ],
        "params": [
          {
            "name": "picture",
            "type": "stdole.stdPicture",
            "description": "Object to create picture from",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "Picture object representing data\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CreateFromIPicture",
        "description": " Creates a stdImage object from a stdole.IPicture object\r\n",
        "remarks": [],
        "examples": [
          " TODO:\r\n"
        ],
        "params": [
          {
            "name": "picture",
            "type": "stdole.IPicture",
            "description": "Object to create picture from",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "Picture object representing data\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CreateFromExcelIPicture",
        "description": " Creates a stdImage object from a Excel.IPicture object\r\n",
        "remarks": [],
        "examples": [
          " TODO:\r\n"
        ],
        "params": [
          {
            "name": "picture",
            "type": "Object<Excel.IPicture>",
            "description": "Object to create picture from",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "Picture object representing data\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CreateFromShape",
        "description": " Creates a stdImage object from a Shape object\r\n",
        "remarks": [],
        "examples": [
          " `stdImage.CreateFromShape(Sheet1.Shapes(\"Picture 2\")).ToFile(\"H:\\test.png\")`\r\n"
        ],
        "params": [
          {
            "name": "shp",
            "type": "Object<(Excel|Word|PowerPoint).Shape>",
            "description": "Object to create picture from",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "Picture object representing data\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CreateFromChart",
        "description": " Creates a stdImage object from a Chart object\r\n",
        "remarks": [],
        "examples": [
          " `stdImage.CreateFromChart(Sheet1.ChartObjects(1).Chart).ToFile(\"H:\\test.png\")`\r\n"
        ],
        "params": [
          {
            "name": "chart",
            "type": "Object<(Excel|Word|PowerPoint).Chart>",
            "description": "Object to create picture from",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "Picture object representing data\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CreateFromScreen",
        "description": " Creates a stdImage object from the desktop window (screenshot)\r\n",
        "remarks": [],
        "examples": [
          " `stdImage.CreateFromScreen().ToFile(\"H:\\test.png\")`\r\n"
        ],
        "params": [],
        "returns": {
          "type": " ",
          "description": "Picture object containing screenshot data\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CreateFromWindow",
        "description": " Creates a stdImage object from a window\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "hwnd",
            "type": "LongPtr",
            "description": "Handle to window",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "bClientArea",
            "type": "Boolean",
            "description": "If true, only the client area of the window is captured. If false, the entire window is captured.",
            "optional": true,
            "defaultValue": "false",
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "Picture object representing data\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CreateFromHICON",
        "description": " Creates a stdImage object from a HICON\r\n",
        "remarks": [],
        "examples": [
          " ```\r\n"
        ],
        "params": [
          {
            "name": "hIcon",
            "type": "LongPtr",
            "description": "Handle to icon",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "Picture object representing data\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "protInit",
        "description": " Initialised stdImage\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "hBITMAP",
            "type": "LongPtr",
            "description": "Handle to bitmap",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": null,
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "ToBinary",
        "description": " Obtain binary data of the image in any format required\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "eFormat",
            "type": "stdImgFormat",
            "description": "The format the data should be in.",
            "optional": true,
            "defaultValue": "stdImgFormatDefault",
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "Binary data of image, ready to load into a file\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "ToFile",
        "description": " Save image as file\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": null,
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "ToClipboard",
        "description": " Copy the image to the clipboard\r\n",
        "remarks": [],
        "examples": [
          " `stdImage.CreateFromFile(\"H:\\test1.bmp\").ToClipboard()\r\n"
        ],
        "params": [],
        "returns": null,
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "ToTempFile",
        "description": " Save a copy in a temporary file and return the path of this file\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "eFormat",
            "type": "stdImgFormat",
            "description": "The format the data should be in.",
            "optional": true,
            "defaultValue": "stdImgFormatDefault",
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "The path to the temporary file.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "ToSheet",
        "description": " Adds the picture to the sheet\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "ws",
            "type": "Worksheet",
            "description": "Worksheet to add image to",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "Top",
            "type": "Double",
            "description": "Top coord of the newly placed image",
            "optional": true,
            "defaultValue": "0 ",
            "paramArray": false
          },
          {
            "name": "Left",
            "type": "Double",
            "description": "Left coord of the newly placed image",
            "optional": true,
            "defaultValue": "0",
            "paramArray": false
          },
          {
            "name": "compress",
            "type": "MsoPictureCompress",
            "description": "Whether to compress the image on import.",
            "optional": true,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " Object<Picture> ",
          "description": "Picture object\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "ToUIControl",
        "description": " Update a UI control's background picture\r\n",
        "remarks": [],
        "examples": [
          " `stdImage.CreateFromFile(\"H:\\test1.bmp\").ToUIControl(UserForm1.Image1)`\r\n"
        ],
        "params": [
          {
            "name": "oControl",
            "type": "Object<Control>",
            "description": "The control to update the picture of",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": null,
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "ToDataUrl",
        "description": " Obtain a data URL of the image\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "eFormat",
            "type": "stdImgFormat",
            "description": "The format of the image",
            "optional": true,
            "defaultValue": "stdImgFormatDefault",
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "Data URL of the image\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "ToShapeFill",
        "description": " Output the image to a shape's fill\r\n",
        "remarks": [],
        "examples": [
          " `stdImage.CreateFromFile(\"H:\\test1.bmp\").ToShapeFill(ActiveSheet.Shapes(1))`\r\n"
        ],
        "params": [
          {
            "name": "shp",
            "type": "Object<Excel.Shape>",
            "description": "The shape to fill",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": null,
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "ToStdPicture",
        "description": " Obtain a stdole.StdPicture\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "Obtain the image as a stdole.StdPicture\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      }
    ],
    "properties": [
      {
        "name": "HBitmap",
        "access": "ReadOnly",
        "description": " Obtain a HBitmap\r\n",
        "remarks": [
          " You are in charge of freeing this pointer.\r\n"
        ],
        "examples": [],
        "params": [],
        "returns": {
          "type": " stdole.StdPicture ",
          "description": "Obtain the image as a stdole.StdPicture\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "HICON",
        "access": "ReadOnly",
        "description": " Obtain (and cache) an HICON\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": "LongPtr",
          "description": ""
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Colors",
        "access": "ReadOnly",
        "description": " Obtain the colors of the image\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ARGB() ",
          "description": "2D array of colors. Colors ordered from (1,1) = bottom-left, (1,height) = top-left, across to (width, height) = top-right.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      }
    ],
    "description": "",
    "remarks": [],
    "examples": [],
    "devNotes": [],
    "todos": [
      "Create Stream, Write to stream, CreateBitmapFromStream",
      "Parse Base64, CreateFromBinary",
      "Case webp",
      "AutoProxy?",
      "Detect format",
      "Implement a more efficient way to do this.",
      "A less hacky method can be found here:  http://access.mvps.org/access/api/api0042.htm"
    ],
    "constructors": [],
    "events": [],
    "implements": []
  },
  {
    "name": "stdJSON",
    "fileName": "stdJSON.cls",
    "methods": [
      {
        "name": "Add",
        "description": " Add a key and value to an object, or a value to an array\r\n",
        "remarks": [
          " Uses `protAddItem_JSONArray` when `This.iType == eJSONArray`; and `protAddItem_JSONObject` when `This.iType == eJSONObject`.\r\n"
        ],
        "examples": [],
        "params": [
          {
            "name": "v",
            "type": "Variant",
            "description": "if This is an eJSONObject, the Key and Value to add. Else the value to add to the eJSONArray.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "if value was a stdJSON, this is returned, else `Nothing`.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "AddArray",
        "description": " Create and add an array to the JSON object/array.\r\n",
        "remarks": [],
        "examples": [
          " ` .AddArray(fromVar:=Array(1,2,3))`\r\n"
        ],
        "params": [
          {
            "name": "key",
            "type": "string",
            "description": "If `this.iType == eJSONObject` then this is the key it should be assigned to. Else this param is unused.",
            "optional": true,
            "defaultValue": "\"\"",
            "paramArray": false
          },
          {
            "name": "fromVar",
            "type": "Variant<Array|Collection>",
            "description": "If provided the object will be pre-filled with data",
            "optional": true,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "The array created\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "AddObject",
        "description": " Create and add an object to the JSON object/array.\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "key",
            "type": "string",
            "description": "If `this.iType == eJSONObject` then this is the key it should be assigned to. Else this param is unused.",
            "optional": true,
            "defaultValue": "\"\"",
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "The object created\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "ChildrenInfo",
        "description": " Obtain the children of this JSON object\r\n",
        "remarks": [
          " - Because of the nature of the JSON object, this will be a collection of dictionaries with the keys \"key\", \"value\" and \"isJSON\".\r\n"
        ],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "The children of this JSON object of the form [{key: string, value: variant, isJSON: boolean},...]\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "ToString",
        "description": " Convert the JSON to string\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "pretty",
            "type": "Boolean",
            "description": "If true, pretty print the JSON",
            "optional": true,
            "defaultValue": "False",
            "paramArray": false
          },
          {
            "name": "prettyIndent",
            "type": "Long",
            "description": "If pretty, the indent to use",
            "optional": true,
            "defaultValue": "2",
            "paramArray": false
          },
          {
            "name": "depth",
            "type": "Long",
            "description": "If pretty, the depth to start at",
            "optional": true,
            "defaultValue": "1",
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "JSON encoded data.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "ToFile",
        "description": " Dump the JSON data to a file\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "sPath",
            "type": "string",
            "description": "Path to file to dump JSON data to",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "prettyIndent",
            "type": "Long",
            "description": "If pretty, the indent to use",
            "optional": true,
            "defaultValue": "0",
            "paramArray": false
          }
        ],
        "returns": null,
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "ToVBObject",
        "description": " Convert to VBA Object\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " Object<Collection|Dictionary> ",
          "description": "`Dictionary` if `eJSONObject`, `Collection` if `eJSONArray`\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "ToSelf",
        "description": " Returns the current json object\r\n",
        "remarks": [],
        "examples": [
          " ```vba\r\n"
        ],
        "params": [],
        "returns": {
          "type": "stdJSON",
          "description": ""
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "NewEnum",
        "description": " Allow `for each x in json` syntax\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "The enumerator to iterate over\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      }
    ],
    "properties": [
      {
        "name": "JsonType",
        "access": "ReadOnly",
        "description": " Obtain the JSON type\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "The JSON type\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Length",
        "access": "ReadOnly",
        "description": " Obtain the length of this JSON object\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "The length of the JSON object\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Item",
        "access": "ReadWrite",
        "description": " Obtain the item for a key or index\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "keyOrIndex",
            "type": "Variant<string|long>",
            "description": "Either a string key (if eJSONObject) or index as long (if eJSONArray)",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "The item for the key or index\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Exists",
        "access": "ReadOnly",
        "description": " Obtain the item for a key or index\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "keyOrIndex",
            "type": "Variant<string|long>",
            "description": "Either a string key (if eJSONObject) or index as long (if eJSONArray)",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "Whether the key or index exists\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      }
    ],
    "description": "",
    "remarks": [],
    "examples": [],
    "devNotes": [],
    "todos": [],
    "constructors": [
      {
        "name": "Create",
        "description": " Create a JSON object\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "iType",
            "type": "EStdJsonType",
            "description": "The type of json object to create. Default is JSON object, i.e. {}.",
            "optional": true,
            "defaultValue": "eJSONObject",
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "stdJSON object of the specified type.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CreateFromString",
        "description": " Create a JSON object from string\r\n",
        "remarks": [],
        "examples": [
          " ```\r\n  ",
          " ```\r\n  "
        ],
        "params": [
          {
            "name": "sJSON",
            "type": "string",
            "description": "string to create json from",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "AllowUnquotedKeys",
            "type": "boolean",
            "description": "Allow unquoted keys? E.G. \"{a:\"\"hello\"\"}\"",
            "optional": true,
            "defaultValue": "false",
            "paramArray": false
          },
          {
            "name": "AllowSingleQuoteStrings",
            "type": "boolean",
            "description": "Allow single quoted strings? E.G. \"{'a':'hello'}\"",
            "optional": true,
            "defaultValue": "false",
            "paramArray": false
          },
          {
            "name": "StoreLargeNumsAsString",
            "type": "boolean",
            "description": "Store Large numbers >16 chars as string instead of doubles. This may be useful if precision is important.",
            "optional": true,
            "defaultValue": "false",
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "`stdJSON` object from string.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CreateFromFile",
        "description": " Create a JSON object from file\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "sJSONFile",
            "type": "string",
            "description": "Path to file containing json data",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "stdJSON object from file data.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CreateFromVariant",
        "description": " Create a JSON object from VB variant\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "vData",
            "type": "Variant",
            "description": "Variant to convert to JSON, e.g. Collection, Dictionary or Array",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "stdJSON object from variant data.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CreateFromParams",
        "description": " Create a JSON object from a set of params\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "iType",
            "type": "EStdJsonType",
            "description": "The type of JSON to create, this affects how `params` is interpreted",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "params",
            "type": "Variant",
            "description": "Either a set of `key`,`value` pairs, if creating an object, or a list of `value`s to add to an array.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "Created json object\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      }
    ],
    "events": [],
    "implements": []
  },
  {
    "name": "stdLambda",
    "fileName": "stdLambda.cls",
    "methods": [
      {
        "name": "protInit",
        "description": " Initialise the lambda\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "iLambdaType",
            "type": "LambdaType",
            "description": "Type of lambda to initialise",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "params",
            "type": "Variant",
            "description": "Parameters to initialise the lambda with",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": null,
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": true
      },
      {
        "name": "Run",
        "description": " Run the lambda from passed parameters\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "params",
            "type": "Array<Variant>",
            "description": "Array of parameters to run the lambda with",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "The result of the lambda\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "RunEx",
        "description": " Run the lambda from an array of parameters\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "params",
            "type": "Variant<Array<Variant>>",
            "description": "Array of parameters to run the lambda with",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "The result of the lambda\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Bind",
        "description": " Bind parameters to the function.  Arguments will be passed in the order they are supplied, before any arguments supplied to the function.\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "params",
            "type": "Array<Variant>",
            "description": "Parameters to bind to the lambda.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "The lambda \r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "BindEx",
        "description": " Bind an array of parameters to the function. Arguments will be passed in the order they are supplied, before any arguments supplied to the function.\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "params",
            "type": "Variant<Array<Variant>>",
            "description": "Array of parameters to bind",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "The lambda existing lambda\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "BindGlobal",
        "description": " Bind a named global variable to the function\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "sGlobalName",
            "type": "String",
            "description": "New global name",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "variable",
            "type": "Variant",
            "description": "Data to store in global variable",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "The lambda existing lambda\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "protRunVMTests",
        "description": " Runs tests on the class\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": null,
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      }
    ],
    "properties": [
      {
        "name": "oFunctExt",
        "access": "ReadOnly",
        "description": " Extend the lambda with new functions and named global variables\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " Object<Dictionary<string,stdICallable> | Dictionary<string,variant>> ",
          "description": "Dictionary of functions and named global variables\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      }
    ],
    "description": "",
    "remarks": [],
    "examples": [],
    "devNotes": [],
    "todos": [
      "Case \"callbyname\": evaluateFunc = CallByName(args(iArgStart))",
      "Switch caching and use of dictionary would be good here",
      "Better error handling",
      "iAccess_General",
      "iSet_General",
      "Test other functions",
      "iReturn_WithValue - this is a utility used for returning values from functions, need to think how to test it properly",
      "iReturn_NoValue - as above.",
      "iObject_MethodCall",
      "iObject_MethodCall_WithArgs",
      "iObject_FieldCall           as method",
      "iObject_FieldCall_WithArgs  as method",
      "iObject_FieldCall           as property",
      "iObject_FieldCall_WithArgs  as property",
      "iObject_PropLet",
      "iObject_PropLet_WithArgs",
      "iObject_PropSet",
      "iObject_PropSet_WithArgs"
    ],
    "constructors": [
      {
        "name": "Create",
        "description": " Create a stdLambda object from a string equation\r\n",
        "remarks": [],
        "examples": [
          " ```vb\r\n"
        ],
        "params": [
          {
            "name": "sEquation",
            "type": "String",
            "description": "The equation to parse",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "bUsePerformanceCache",
            "type": "Boolean",
            "description": "Whether to cache the parsed equation for performance",
            "optional": true,
            "defaultValue": "False",
            "paramArray": false
          },
          {
            "name": "bSandboxExtras",
            "type": "Boolean",
            "description": "Whether to allow extra functions to be called",
            "optional": true,
            "defaultValue": "False",
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "A first class object representing the equation. Can be called with `.Run(param1, param2, ...)` or `.RunEx(params)`\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CreateMultiline",
        "description": " Create a stdLambda object from an Array of strings\r\n",
        "remarks": [],
        "examples": [
          " ```vb\r\n"
        ],
        "params": [
          {
            "name": "sEquation",
            "type": "Variant<Array<String>>",
            "description": "The equation to parse",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "bUsePerformanceCache",
            "type": "Boolean",
            "description": "Whether to cache the parsed equation for performance",
            "optional": true,
            "defaultValue": "False",
            "paramArray": false
          },
          {
            "name": "bSandboxExtras",
            "type": "Boolean",
            "description": "Whether to allow extra functions to be called",
            "optional": true,
            "defaultValue": "False",
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "A first class object representing the equation. Can be called with `.Run(param1, param2, ...)` or `.RunEx(params)`\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      }
    ],
    "events": [],
    "implements": [
      "stdICallable"
    ]
  },
  {
    "name": "stdPerformance",
    "fileName": "stdPerformance.cls",
    "methods": [
      {
        "name": "protInit",
        "description": " Initialises the class\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "objType",
            "type": "EPerfObjType",
            "description": "Type of performance object to initialise.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "params",
            "type": "Variant<Array<Variant>>",
            "description": "Additional params supplied as array.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": null,
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": true
      },
      {
        "name": "AddMeasurement",
        "description": " AddMeasurement\r\n",
        "remarks": [
          " If a time is added that was previously also added then the average of the times is calculated.\r\n"
        ],
        "examples": [],
        "params": [
          {
            "name": "sKey",
            "type": "string",
            "description": "Name of measurement to add to global cache",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "time",
            "type": "Double",
            "description": "time to add to global cache",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "nCount",
            "type": "Double",
            "description": "number of operations (divisor)",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": null,
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": true
      },
      {
        "name": "MeasuresClear",
        "description": " MeasuresClear - Clears all procedures/blocks and times that have been measured\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": null,
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      }
    ],
    "properties": [
      {
        "name": "Measurement",
        "access": "ReadOnly",
        "description": " Obtain a measurement\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "sKey",
            "type": "String",
            "description": "Name of measurement to get",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "Average measurement time\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "MeasuresKeys",
        "access": "ReadOnly",
        "description": " MeasuresKeys\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " Array<String> ",
          "description": "Array containing the procedures or blocks that have been measured.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      }
    ],
    "description": "",
    "remarks": [],
    "examples": [],
    "devNotes": [],
    "todos": [],
    "constructors": [
      {
        "name": "CreateMeasure",
        "description": " Measure\r\n",
        "remarks": [],
        "examples": [
          "```vb\r\n",
          "```vb\r\n"
        ],
        "params": [
          {
            "name": "sProc",
            "type": "string",
            "description": "Name of method or block to measure",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "nCount",
            "type": "double=1",
            "description": "Number of times the block will be ran (used to calculate average time), default = 1.",
            "optional": true,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " stdPerformance<iMeasure> ",
          "description": "Object which upon termination, adds measurement of block to global cache\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CreateOptimiser",
        "description": " Optimise\r\n",
        "remarks": [
          " Calculation is defined as long instead of xlCalculation so the function continues to work without compile error in Word, Powerpoint etc.\r\n"
        ],
        "examples": [
          "```vb\r\n"
        ],
        "params": [
          {
            "name": "ScreenUpdating",
            "type": "boolean",
            "description": "ScreenUpdating set value",
            "optional": true,
            "defaultValue": "false",
            "paramArray": false
          },
          {
            "name": "EnableEvents",
            "type": "boolean",
            "description": "EnableEvents set value",
            "optional": true,
            "defaultValue": "false",
            "paramArray": false
          },
          {
            "name": "Calculation",
            "type": "long",
            "description": "Calculation set value",
            "optional": true,
            "defaultValue": "-4135",
            "paramArray": false
          }
        ],
        "returns": {
          "type": " stdPerformance<iOptimiser> ",
          "description": "Object termination has special behaviour. See Measure and Optimise methods for further details.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      }
    ],
    "events": [],
    "implements": []
  },
  {
    "name": "stdProcess",
    "fileName": "stdProcess.cls",
    "methods": [
      {
        "name": "forceQuit",
        "description": " Wait till the process closes\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "ExitCode",
            "type": "Long",
            "description": "The exit code to use when terminating the process",
            "optional": true,
            "defaultValue": "0",
            "paramArray": false
          }
        ],
        "returns": null,
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "waitTilClose",
        "description": " Wait till the process closes\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": null,
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      }
    ],
    "properties": [
      {
        "name": "id",
        "access": "ReadOnly",
        "description": " Obtain the process id\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": "  ",
          "description": "the process id\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "name",
        "access": "ReadOnly",
        "description": " Obtain the process name\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "the process name\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "path",
        "access": "ReadOnly",
        "description": " Obtain the process path\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "the process path\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Winmgmt",
        "access": "ReadOnly",
        "description": " Returns the Winmgmts object representing the process\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " Object<SWbemObjectEx> ",
          "description": "The Winmgmts object representing the process\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CommandLine",
        "access": "ReadOnly",
        "description": " Attempts to return the command line of the application. Please note [the command line may have changed](https://devblogs.microsoft.com/oldnewthing/20091125-00/?p=15923).\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "The string which originally contained the command line arguments passed to this application.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "isRunning",
        "access": "ReadOnly",
        "description": " Returns whether the process is still running or not\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "`true` if the process is still running, `false` otherwise\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "isCritical",
        "access": "ReadOnly",
        "description": " Returns whether the process is critical or not\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "`true` if the process is critical, `false` otherwise\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Priority",
        "access": "ReadOnly",
        "description": " Get the process' priority\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "the process' priority\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "TimeCreated",
        "access": "ReadOnly",
        "description": " Get the datetime representing the time the process was started/created\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "The datetime representing the time the process was started/created\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "TimeQuit",
        "access": "ReadOnly",
        "description": " Get the datetime representing the time the process was quit\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "The datetime representing the time the process was quit\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "TimeKernel",
        "access": "ReadOnly",
        "description": " Get the amount of time that the process has executed in kernel mode\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "The datetime representing the kernel time\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "TimeUser",
        "access": "ReadOnly",
        "description": " Get the amount of time that the process has executed in user mode\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "The datetime representing the user time\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "ExitCode",
        "access": "ReadOnly",
        "description": " Get the exit code of this process. Note, an exit code is only ever received if the process has ended. Check isRunning prior to calling this function.\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "the exit code provided at runtime\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      }
    ],
    "description": "",
    "remarks": [],
    "examples": [],
    "devNotes": [],
    "todos": [
      "SessionID",
      "ThreadID"
    ],
    "constructors": [
      {
        "name": "Create",
        "description": " Launches a process and creates a stdProcess object for it\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "sCmd",
            "type": "String",
            "description": "The command to create the process",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "winStyle",
            "type": "VbAppWinStyle",
            "description": "The style to show the window",
            "optional": true,
            "defaultValue": "VbAppWinStyle.vbHide",
            "paramArray": false
          }
        ],
        "returns": {
          "type": "        ",
          "description": "The launched process\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CreateFromProcessId",
        "description": " Creates a process from a given process id\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "pID",
            "type": "Long",
            "description": "the process id",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": "   ",
          "description": "the queried process\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CreateFromQuery",
        "description": " Obtains a the first process which matches the query given\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "query",
            "type": "stdICallable",
            "description": "The query to search processes for",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": "     ",
          "description": "the queried process\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CreateManyFromQuery",
        "description": " Obtains a collection of processes which match the query given\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "query",
            "type": "stdICallable",
            "description": "The query to search processes for",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " Collection<stdProcess> ",
          "description": "the queried processes\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CreateAll",
        "description": " Obtains a collection of all processes\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " Collection<stdProcess> ",
          "description": "All processes\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      }
    ],
    "events": [],
    "implements": []
  },
  {
    "name": "stdQuadTree",
    "fileName": "stdQuadTree.cls",
    "methods": [
      {
        "name": "Create",
        "description": " Create quadtree from center coords and halfDimension / radius\r\n",
        "remarks": [
          null
        ],
        "examples": [],
        "params": [
          {
            "name": "cx",
            "type": "Double",
            "description": "The center x coord",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "cy",
            "type": "Double",
            "description": "The center y coord",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "halfDimension",
            "type": "Double",
            "description": "the \"radius\" of the cell",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "capacityBeforeSubdivision",
            "type": "Long",
            "description": "The number of nodes a quadtree can hold before it subdivides. This can also be seen as the number of duplicate points allowed. If there are duplicates beyond this number you will get a stack overflow error.",
            "optional": true,
            "defaultValue": "4",
            "paramArray": false
          },
          {
            "name": "minimumHalfDimension",
            "type": "Double",
            "description": "Minimum boundary size when points stop causing subdivisions. Helps handle duplicate points",
            "optional": true,
            "defaultValue": "0.00001",
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "Quadtree instance\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CreateFromBounds",
        "description": " Creates a quadtree from min/max x/y\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "minX",
            "type": "Double",
            "description": "Minimum x coord",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "minY",
            "type": "Double",
            "description": "Minimum y coord",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "maxX",
            "type": "Double",
            "description": "Maximum x coord",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "maxY",
            "type": "Double",
            "description": "Maximum y coord",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "capacityBeforeSubdivision",
            "type": "Long",
            "description": "The number of nodes a quadtree can hold before it subdivides. This can also be seen as the number of duplicate points allowed. If there are duplicates beyond this number you will get a stack overflow error.",
            "optional": true,
            "defaultValue": "4",
            "paramArray": false
          },
          {
            "name": "minimumHalfDimension",
            "type": "Double",
            "description": "Minimum boundary size when points stop causing subdivisions. Helps handle duplicate points",
            "optional": true,
            "defaultValue": "0.00001",
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "Quadtree instance\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "protInit",
        "description": " Initialise quadtree\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "cx",
            "type": "Double",
            "description": "Center X coord",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "cy",
            "type": "Double",
            "description": "Center Y coord",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "halfDimension",
            "type": "Double",
            "description": "radius of square",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "capacityBeforeSubdivision",
            "type": "Long",
            "description": "The number of nodes a quadtree can hold before it subdivides. This can also be seen as the number of duplicate points allowed. If there are duplicates beyond this number you will get a stack overflow error.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "minimumHalfDimension",
            "type": "Double",
            "description": "Minimum boundary size when points stop causing subdivisions. Helps handle duplicate points",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "parent",
            "type": "stdQuadTree",
            "description": "The parent of this quadtree element",
            "optional": true,
            "defaultValue": "nothing",
            "paramArray": false
          }
        ],
        "returns": null,
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": true
      },
      {
        "name": "insertPoint",
        "description": " @param x - X coord of point\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "y",
            "type": "Double",
            "description": "Y coord of point",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "meta",
            "type": "Variant",
            "description": "Metadata object i.e. holding additional geospatial information",
            "optional": true,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "True if inserted into the tree, false if error e.g. out of bounds.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "queryRange",
        "description": " Query for points within a range depicted by center and radius (half dimension)\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "cx",
            "type": "Double",
            "description": "Center x coordinate",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "cy",
            "type": "Double",
            "description": "Center y coordinate",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "radius",
            "type": "Double",
            "description": "minimumDimension / radius of range to search",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " Collection<Variant<Array1D<xcoord, ycoord, metadata>>> ",
          "description": "The points found within the range\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "queryRangeBounds",
        "description": " Query for points within a rect\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "minX",
            "type": "Double",
            "description": "Minimum x coord of rect",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "minY",
            "type": "Double",
            "description": "Minimum y coord of rect",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "maxX",
            "type": "Double",
            "description": "Maximum x coord of rect",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "maxY",
            "type": "Double",
            "description": "Maximum y coord of rect",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " Collection<Variant<Array1D<xcoord, ycoord, metadata>>> ",
          "description": "The points found within the bounds\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      }
    ],
    "properties": [],
    "description": "",
    "remarks": [],
    "examples": [],
    "devNotes": [],
    "todos": [],
    "constructors": [],
    "events": [],
    "implements": []
  },
  {
    "name": "stdRefArray",
    "fileName": "stdRefArray.cls",
    "methods": [
      {
        "name": "Create",
        "description": "",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": "stdRefArray",
          "description": ""
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "protInit",
        "description": "",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": null,
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      }
    ],
    "properties": [],
    "description": "",
    "remarks": [],
    "examples": [],
    "devNotes": [],
    "todos": [],
    "constructors": [],
    "events": [],
    "implements": []
  },
  {
    "name": "stdReg",
    "fileName": "stdReg.cls",
    "methods": [
      {
        "name": "Create",
        "description": " Create a new stdReg object from a path with required access\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "path",
            "type": "String",
            "description": "Path to registry key or value",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "access",
            "type": "ERegistryAccess",
            "description": "Access required to open key i.e. `PERM_READ`, `PERM_WRITE`, `PERM_ALL_ACCESS`",
            "optional": true,
            "defaultValue": "ERegistryAccess.PERM_READ",
            "paramArray": false
          },
          {
            "name": "normalisePath",
            "type": "Boolean",
            "description": "If `true`, then path will be normalised to use `\"\\\"` as path separator",
            "optional": true,
            "defaultValue": "True",
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "`stdReg` object\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CreateFromKey",
        "description": " Create a new stdReg object from a key path with required access\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "path",
            "type": "String",
            "description": "Path to registry key",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "access",
            "type": "ERegistryAccess",
            "description": "Access required to open key i.e. `PERM_READ`, `PERM_WRITE`, `PERM_ALL_ACCESS`",
            "optional": true,
            "defaultValue": "ERegistryAccess.PERM_READ",
            "paramArray": false
          },
          {
            "name": "normalisePath",
            "type": "Boolean",
            "description": "If `true`, then path will be normalised to use `\"\\\"` as path separator",
            "optional": true,
            "defaultValue": "True",
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "`stdReg` object representing registry key\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CreateFromItem",
        "description": " Create a new stdReg object from a value path with required access\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "path",
            "type": "String",
            "description": "Path to registry value",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "access",
            "type": "ERegistryAccess",
            "description": "Access required to open key i.e. `PERM_READ`, `PERM_WRITE`, `PERM_ALL_ACCESS`",
            "optional": true,
            "defaultValue": "ERegistryAccess.PERM_READ",
            "paramArray": false
          },
          {
            "name": "normalisePath",
            "type": "Boolean",
            "description": "If `true`, then path will be normalised to use `\"\\\"` as path separator",
            "optional": true,
            "defaultValue": "True",
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "`stdReg` object representing registry value\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "SetValue",
        "description": " Set value and change type\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "vNew",
            "type": "Variant",
            "description": "Value to set item to",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "iType",
            "type": "ERegistryValueType",
            "description": "Type of value to set",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": null,
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      }
    ],
    "properties": [
      {
        "name": "name",
        "access": "ReadOnly",
        "description": " Obtain name of registry key\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "Name of registry key\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "RegType",
        "access": "ReadOnly",
        "description": " Obtain type of registry object. Either `ERegistryType.iKey` or `ERegistryType.iItem`.\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "Type of registry Either `ERegistryType.iKey` or `ERegistryType.iItem`.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "isRoot",
        "access": "ReadOnly",
        "description": " Obtain whether registry key/item is root\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "Whether registry key/item is root\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "path",
        "access": "ReadOnly",
        "description": " Obtain the path of the registry key/item\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "Path of the registry key/item\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Parent",
        "access": "ReadOnly",
        "description": " Obtain the parent of the registry key/item\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "Parent of the registry key/item\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "children",
        "access": "ReadOnly",
        "description": " Get all keys and items\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " Collection<stdReg> ",
          "description": "Collection of stdReg keys and items\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Keys",
        "access": "ReadOnly",
        "description": " Get all subkeys\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " Collection<stdReg> ",
          "description": "Collection of stdReg keys\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Items",
        "access": "ReadOnly",
        "description": " Get all items\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " Collection<stdReg> ",
          "description": "Collection of stdReg items\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "ItemType",
        "access": "ReadOnly",
        "description": " Get the item type of this stdReg Item\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "Type of stdReg Item\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "value",
        "access": "ReadWrite",
        "description": " Get / Set value\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "Value of stdReg Item\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      }
    ],
    "description": "",
    "remarks": [],
    "examples": [],
    "devNotes": [],
    "todos": [
      "SWAP",
      "Expand vars(?)",
      "SWAP",
      "TBC "
    ],
    "constructors": [],
    "events": [],
    "implements": []
  },
  {
    "name": "stdRegex",
    "fileName": "stdRegex.cls",
    "methods": [
      {
        "name": "Test",
        "description": " Given a text string, return whether the source regex is present\r\n",
        "remarks": [],
        "examples": [
          "For a regex of: `\\d{5}-ST[A-Z]\\d`\r\n"
        ],
        "params": [
          {
            "name": "sHaystack",
            "type": "String",
            "description": "Text to search for regex in.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "`True` if the regex pattern is present, `false` otherwise.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Match",
        "description": " Given a text string, return the first match.\r\n",
        "remarks": [],
        "examples": [
          "For Regex: `(?<id>\\d{5}-ST[A-Z]\\d) - (?<desc>.*)` and data:\r\n"
        ],
        "params": [
          {
            "name": "sHaystack",
            "type": "String",
            "description": "Text to search for regex in.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " Object<Dictionary<string|number,string>> ",
          "description": "A dictionary containing the match, submatches, named matches, Count and Raw match object\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "MatchAll",
        "description": " Given a text string, return all strings which match the source regex pattern.\r\n",
        "remarks": [],
        "examples": [
          "For regex: `\\d{5}-ST[A-Z]\\d` and data:\r\n"
        ],
        "params": [
          {
            "name": "sHaystack",
            "type": "String",
            "description": "Text to search for regex in.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " Collection<Object<Dictionary<string|number,string>>> ",
          "description": "An array of strings which match the regex.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Replace",
        "description": " Given a Haystack and a Replacer, Replace all matches with the source regex with the format given in the Replacer.\r\n\r\n",
        "remarks": [],
        "examples": [
          "For regex: `(?<id>\\d{5}-ST[A-Z]\\d))\\s+(?<count>\\d+)\\s+(?<date>../../....)` and data: \r\n"
        ],
        "params": [
          {
            "name": "sHaystack",
            "type": "String",
            "description": "Text to search for regex in.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "sReplacer",
            "type": "String",
            "description": "Format of replacement text.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "The haystack with replaced details.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "List",
        "description": " Given a Haystack and a Format, Generate a string containing all matches in the format provided.\r\n\r\n",
        "remarks": [],
        "examples": [
          "For regex: `(?<id>\\d{5}-ST[A-Z]\\d))\\s+(?<count>\\d+)\\s+(?<date>../../....)` and data:\r\n"
        ],
        "params": [
          {
            "name": "sHaystack",
            "type": "String",
            "description": "Text to search for regex in.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "sFormat",
            "type": "String",
            "description": "Format of output list.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "A list of strings matched.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "ListArr",
        "description": " Supplied with a haystack to search, ListArr will return a 2d array of data where the rows represent each match, and the columns represent the formats passed into vFormats parameter\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "sHaystack",
            "type": "string",
            "description": "Haystack to search",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "vFormats",
            "type": "Variant<Array<String>>",
            "description": "Array of formats to print into seperate columns. E.G. `Array(\"$id-$date\",\"$detail\")`",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " Variant<Array[2d]<String>> ",
          "description": "All matches as a 2d array. Useful especially for dumping matches to Excel.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      }
    ],
    "properties": [
      {
        "name": "pattern",
        "access": "ReadWrite",
        "description": " Get/Set pattern for regex\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "Pattern for regex\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "flags",
        "access": "ReadWrite",
        "description": " Get/Set Flags for regex\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "Flags for regex\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      }
    ],
    "description": "",
    "remarks": [],
    "examples": [],
    "devNotes": [],
    "todos": [
      "Make this more efficient, ideally we'd only loop through the format once"
    ],
    "constructors": [
      {
        "name": "Create",
        "description": " Creates a regex object given a pattern and flags.\r\n",
        "remarks": [],
        "examples": [
          "```vb\r\n"
        ],
        "params": [
          {
            "name": "pattern",
            "type": "String",
            "description": "The pattern to match",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "flags",
            "type": "String",
            "description": "Optional flags to apply",
            "optional": true,
            "defaultValue": "\"\"",
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "Regular expression object\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      }
    ],
    "events": [],
    "implements": []
  },
  {
    "name": "stdSentry",
    "fileName": "stdSentry.cls",
    "methods": [
      {
        "name": "Create",
        "description": " Create a sentry factory\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "OnInit",
            "type": "stdICallable",
            "description": "Function to run when the sentry is created.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "OnDestroy",
            "type": "stdICallable",
            "description": "Function to run when the sentry is destroyed.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "passVars",
            "type": "boolean",
            "description": "If true, the result of OnInit is passed to OnDestroy. If false, no arguments are passed to OnDestroy.",
            "optional": true,
            "defaultValue": "true",
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "The sentry factory\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CreateOptimiser",
        "description": " Create a sentry which acts as an \"optimiser\" for code. Note, setting options doesn't always lead to performance improvements. See [vba-articles performance thread](https://sancarn.github.io/vba-articles/performance-tips.html) for details.\r\n",
        "remarks": [],
        "examples": [
          " ```vba\r\n"
        ],
        "params": [
          {
            "name": "EnableEvents",
            "type": "vbTriState",
            "description": "If not Empty, sets Application.EnableEvents to this value. If Empty, Application.EnableEvents remains unchanged.",
            "optional": true,
            "defaultValue": "vbUseDefault",
            "paramArray": false
          },
          {
            "name": "ScreenUpdating",
            "type": "vbTriState",
            "description": "If not Empty, sets Application.ScreenUpdating to this value. If Empty, Application.ScreenUpdating remains unchanged.",
            "optional": true,
            "defaultValue": "vbUseDefault",
            "paramArray": false
          },
          {
            "name": "Calculation",
            "type": "Long",
            "description": "If not -1, sets Application.Calculation to this value. If -1, Application.Calculation remains unchanged.",
            "optional": true,
            "defaultValue": "-1",
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "A sentry which will restore the original settings when destroyed.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CreateFromObjectProperty",
        "description": " Create a sentry from a property of an object\r\n",
        "remarks": [],
        "examples": [
          " ```vba\r\n"
        ],
        "params": [
          {
            "name": "obj",
            "type": "Object",
            "description": "Object to bind the property to",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "sPropertyName",
            "type": "String",
            "description": "Name of the property to bind",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "value",
            "type": "Variant",
            "description": "Value to set the property to",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "The sentry\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CreateFromObjectMethod",
        "description": " Create a sentry from a method of an object\r\n",
        "remarks": [],
        "examples": [
          " ```vba\r\n"
        ],
        "params": [
          {
            "name": "obj",
            "type": "Object",
            "description": "Object to bind the method to",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "The sentry\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CreateErrorStack",
        "description": " Create a sentry for error stack management\r\n",
        "remarks": [],
        "examples": [
          " ```vba\r\n"
        ],
        "params": [
          {
            "name": "name",
            "type": "String",
            "description": "Name of the stack to add",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "The sentry\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CreateFromAutomationSecurity",
        "description": " Create a sentry from an AutomationSecurity setting\r\n",
        "remarks": [],
        "examples": [
          " ```vba\r\n"
        ],
        "params": [
          {
            "name": "sec",
            "type": "MsoAutomationSecurity",
            "description": "AutomationSecurity setting desired",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "The sentry\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "protInitFactory",
        "description": " @param OnInit - Function to run when the sentry is created. Should return arguments to pass to OnDestroy. If OnInit returns Empty, no arguments are passed to OnDestroy.\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "OnDestroy",
            "type": "stdICallable",
            "description": "Function to run when the sentry is destroyed. Should take the arguments returned by OnInit.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": null,
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "protInitInstance",
        "description": "",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": null,
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Run",
        "description": " Run the sentry\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "args",
            "type": "Variant",
            "description": "Arguments to pass to the OnInit function",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "The sentry\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "RunEx",
        "description": " Run the sentry\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "args",
            "type": "Variant",
            "description": "Arguments to pass to the OnInit function",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "The sentry\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Bind",
        "description": " Bind arguments to the sentry factory\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "args",
            "type": "Variant",
            "description": "Arguments to bind to the sentry",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "The sentry\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "BindEx",
        "description": " Bind arguments to the sentry factory\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "args",
            "type": "Variant<Array<Variant>>",
            "description": "Arguments to bind to the sentry",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "The sentry\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "SendMessage",
        "description": " Making late-bound calls to `stdSentry` members. Each object which implements `stdICallable`\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "sMessage",
            "type": "string",
            "description": "Message to send. Standard messages include \"obj\" returning the object, \"className\" returning the class name. Other messages are implementation specific.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "success",
            "type": "boolean",
            "description": "Whether the call was successful",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "params",
            "type": "variant",
            "description": "Any variant, typically parameters as an array. Passed along with the message.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "Any return value.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": true
      }
    ],
    "properties": [],
    "description": "",
    "remarks": [],
    "examples": [],
    "devNotes": [],
    "todos": [
      ""
    ],
    "constructors": [],
    "events": [],
    "implements": [
      "stdICallable"
    ]
  },
  {
    "name": "stdTimer",
    "fileName": "stdTimer.cls",
    "methods": [
      {
        "name": "Create",
        "description": " Create an instance of the timer\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "iMilliseconds",
            "type": "Long",
            "description": "Number of milliseconds to raise Tick Event between",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "callback",
            "type": "stdICallable<()=>void>",
            "description": "Callback object. Must contain a Run() method.",
            "optional": true,
            "defaultValue": "Nothing",
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "The frequency isn't guaranteed but it will be as close as humanly possible.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "protInit",
        "description": " Initialise module\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "iTimerResolution",
            "type": "Long",
            "description": "Number of milliseconds to raise Tick Event between",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "callback",
            "type": "stdICallable<()=>void>",
            "description": "Optional Listener",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": null,
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": true
      },
      {
        "name": "injectCode",
        "description": " Inject VBA code into a workbook\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "wb",
            "type": "Workbook",
            "description": "The workbook to inject code into",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "sModuleName",
            "type": "String",
            "description": "The module name to create",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "sCode",
            "type": "String",
            "description": "The code to insert into the module",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "iModuleType",
            "type": "Long",
            "description": "The type of code module to create (Module=1, Class=2)",
            "optional": true,
            "defaultValue": "1",
            "paramArray": false
          }
        ],
        "returns": null,
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      }
    ],
    "properties": [],
    "description": "",
    "remarks": [],
    "examples": [],
    "devNotes": [],
    "todos": [],
    "constructors": [],
    "events": [
      {
        "name": "Tick",
        "description": "",
        "remarks": [],
        "examples": [],
        "params": [],
        "devNotes": [],
        "todos": []
      }
    ],
    "implements": []
  },
  {
    "name": "stdUIElement",
    "fileName": "stdUIElement.cls",
    "methods": [
      {
        "name": "CreateFromControl",
        "description": " Creating a UI Element from an existing control\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "ctrl",
            "type": "Control",
            "description": "The control to create the UI Element from",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "callback",
            "type": "stdICallable<(el: stdUIElement, event: EUIElementEvent, params: Variant<Array<Variant>>)=>void>",
            "description": "The callback object to use for event handling",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "The UI Element\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CreateFromType",
        "description": " Creating a UI Element from a type\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "oControls",
            "type": "MSForms.controls",
            "description": "The controls collection to add the control to",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "iCtrlType",
            "type": "EUIElementType",
            "description": "The type of control to create",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "sName",
            "type": "String",
            "description": "The name of the control",
            "optional": true,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "Caption",
            "type": "String",
            "description": "The caption of the control",
            "optional": true,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "callback",
            "type": "stdICallable<(el: stdUIElement, event: EUIElementEvent, params: Variant<Array<Variant>>)=>void>",
            "description": "The callback object to use for event handling",
            "optional": true,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "fLeft",
            "type": "Double",
            "description": "The left position of the control",
            "optional": true,
            "defaultValue": "0",
            "paramArray": false
          },
          {
            "name": "fTop",
            "type": "Double",
            "description": "The top position of the control",
            "optional": true,
            "defaultValue": "0",
            "paramArray": false
          },
          {
            "name": "fWidth",
            "type": "Double",
            "description": "The width of the control",
            "optional": true,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "fHeight",
            "type": "Double",
            "description": "The height of the control",
            "optional": true,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "The UI Element\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      }
    ],
    "properties": [
      {
        "name": "uiType",
        "access": "ReadOnly",
        "description": " Obtain type of input control\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "The type of input control\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Control",
        "access": "ReadOnly",
        "description": " Obtain control object\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "The control object\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "uiObject",
        "access": "ReadOnly",
        "description": " Obtain ui object raw item\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "The ui object raw item / event sink\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Value",
        "access": "ReadWrite",
        "description": " Get/Set Value\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "The value of the control\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Caption",
        "access": "ReadWrite",
        "description": " Get/Set Caption - The visible text of a control\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "The caption of the control\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Left",
        "access": "ReadWrite",
        "description": " Get/Set Position Left\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "The left position of the control\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Top",
        "access": "ReadWrite",
        "description": " Get/Set Position Top\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "The top position of the control\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Width",
        "access": "ReadWrite",
        "description": " Get/Set Size Width\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "The width of the control\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Height",
        "access": "ReadWrite",
        "description": " Get/Set Size Height\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "The height of the control\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "id",
        "access": "ReadOnly",
        "description": " Getter for id\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "The id of the control. This is a generated GUID\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      }
    ],
    "description": "",
    "remarks": [],
    "examples": [],
    "devNotes": [],
    "todos": [
      "Consider calculating and passing X and Y coords of mouse press event",
      "SpinButton_DblClick using MouseDown",
      "ScrollBar_DblClick using MouseDown",
      "Image_DblClick using MouseDown"
    ],
    "constructors": [],
    "events": [],
    "implements": []
  },
  {
    "name": "stdWebSocket",
    "fileName": "stdWebSocket.cls",
    "methods": [
      {
        "name": "protInit",
        "description": " Initializes the object\r\n",
        "remarks": [],
        "examples": [
          " `ws.protInit(\"wss://echo.websocket.org/\")`\r\n"
        ],
        "params": [
          {
            "name": "url",
            "type": "String",
            "description": "The websocket url to track.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": null,
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": true
      },
      {
        "name": "Send",
        "description": " Sends data through the WebSocket\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "data",
            "type": "Variant",
            "description": "The data to send",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": null,
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CloseSocket",
        "description": " Closes the WebSocket connection\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "Code",
            "type": "Long",
            "description": "A numeric value indicating the status code explaining why the connection is being closed. If this parameter is not specified, a default value of 1005 is assumed. See the [list of status](https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#status_codes) code of CloseEvent for permitted values.",
            "optional": true,
            "defaultValue": "1000",
            "paramArray": false
          },
          {
            "name": "reason",
            "type": "String",
            "description": "A human-readable string explaining why the connection is closing.",
            "optional": true,
            "defaultValue": "\"\"",
            "paramArray": false
          }
        ],
        "returns": null,
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Disconnect",
        "description": " Closes and deletes the WebSocket, removing references so the object can be garbage collected\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": null,
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "handleEvent",
        "description": " Handles socket events\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "sEventName",
            "type": "String",
            "description": "The name of the event (\"Open\", \"Close\", \"Error\" or \"Message\")",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "oEventData",
            "type": "Object",
            "description": "Data to forward to event handler.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": null,
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": true
      }
    ],
    "properties": [
      {
        "name": "url",
        "access": "ReadOnly",
        "description": " Gets the url of the websocket\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "The url of the websocket\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      }
    ],
    "description": "",
    "remarks": [],
    "examples": [],
    "devNotes": [],
    "todos": [],
    "constructors": [
      {
        "name": "Create",
        "description": " Creates and returns a new WebSocket object\r\n",
        "remarks": [],
        "examples": [
          " stdWebSocket.Create(\"wss://echo.websocket.org/\")\r\n"
        ],
        "params": [
          {
            "name": "url",
            "type": "String",
            "description": "The websocket url to track.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "The new WebSocket object.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      }
    ],
    "events": [
      {
        "name": "EventRaised",
        "description": "",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "sEventName",
            "type": "\"Open\"|\"Close\"|\"Error\"|\"Message\"",
            "description": "The name of the event.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "eventData",
            "type": "Variant",
            "description": "Data to forward to event handler.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "devNotes": [],
        "todos": []
      },
      {
        "name": "OnOpen",
        "description": "",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "eventData",
            "type": "Variant",
            "description": "Data to forward to event handler.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "devNotes": [],
        "todos": []
      },
      {
        "name": "OnClose",
        "description": "",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "eventData",
            "type": "Variant",
            "description": "Data to forward to event handler.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "devNotes": [],
        "todos": []
      },
      {
        "name": "OnError",
        "description": "",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "eventData",
            "type": "Variant",
            "description": "Data to forward to event handler.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "devNotes": [],
        "todos": []
      },
      {
        "name": "OnMessage",
        "description": "",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "eventData",
            "type": "Variant",
            "description": "Data to forward to event handler.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "devNotes": [],
        "todos": []
      }
    ],
    "implements": []
  },
  {
    "name": "stdWindow",
    "fileName": "stdWindow.cls",
    "methods": [
      {
        "name": "AsAcc",
        "description": " Converts a stdWindow object to a stdAcc object\r\n",
        "remarks": [
          " - This function requires stdAcc dependency.\r\n",
          " - For full intellisense, add `stdAccPresent = 1` to the compiler constants\r\n"
        ],
        "examples": [],
        "params": [],
        "returns": {
          "type": " Object<stdAcc>|stdAcc ",
          "description": "stdAcc object representing the window\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "setOwnerHandle",
        "description": " Set the owner HWND of the window. Useful if you want to set the owner to 0 (no owner).\r\n",
        "remarks": [
          " - The owner is not the same as the parent. See: Raymond Chen's article: https://devblogs.microsoft.com/oldnewthing/20100315-00/?p=14613.\r\n"
        ],
        "examples": [],
        "params": [
          {
            "name": "hwnd",
            "type": "LongPtr",
            "description": "Handle to window to set as owner",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": null,
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "SetHook",
        "description": " Set hooks for a window\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "idHook",
            "type": "apiWindowHookType",
            "description": "Type of hook to set",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "hook",
            "type": "LongPtr",
            "description": "Hook function e.g `AddressOf MyHookFunction`",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "hInstance",
            "type": "LongPtr",
            "description": "Instance handle of the hook function",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "dwThreadID",
            "type": "Long",
            "description": "Thread ID of the hook function",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "Handle to the hook\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "FindFirst",
        "description": " Search the Window tree for elements which match a certain criteria. Return the first element found.\r\n",
        "remarks": [],
        "examples": [
          " ```vb\r\n 'Find where name is \"hello\" and class is \"world\":\r\n"
        ],
        "params": [
          {
            "name": "query",
            "type": "stdICallable<(stdWindow,depth)=>EWndFindResult>",
            "description": "Callback returning `EWndFindResult` options:",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "searchType",
            "type": "EWndFindType",
            "description": "The type of search, 0 for Breadth First Search (BFS) and 1 for Depth First Search (DFS).",
            "optional": true,
            "defaultValue": "EWndFindType.BreadthFirst",
            "paramArray": false
          },
          {
            "name": "iStaticDepthLimit",
            "type": "Long",
            "description": "Static depth limit. E.G. if you want to search children only, set this value to 1",
            "optional": true,
            "defaultValue": "-1",
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "First element found, or `Nothing` if no element found.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "FindAll",
        "description": " Search the Window tree for elements which match a certain criteria. Return all elements found.\r\n",
        "remarks": [],
        "examples": [
          " ```vb\r\n 'Find where name is \"hello\" and class is \"world\":\r\n"
        ],
        "params": [
          {
            "name": "query",
            "type": "stdICallable<(stdWindow,depth)=>EWndFindResult>",
            "description": "Callback returning `EWndFindResult` options:",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "searchType",
            "type": "EWndFindType",
            "description": "The type of search, 0 for Breadth First Search (BFS) and 1 for Depth First Search (DFS).",
            "optional": true,
            "defaultValue": "EWndFindType.BreadthFirst",
            "paramArray": false
          },
          {
            "name": "iStaticDepthLimit",
            "type": "Long",
            "description": "Static depth limit. E.G. if you want to search children only, set this value to 1",
            "optional": true,
            "defaultValue": "-1",
            "paramArray": false
          }
        ],
        "returns": {
          "type": " Collection<stdWindow> ",
          "description": "Collection of elements found, or `Nothing` if no element found.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "getAllText",
        "description": " Obtain all text from a window\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "All captions from a window concatenated together (DFS-ordering)\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Quit",
        "description": " Close the window\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": null,
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "ForceQuit",
        "description": " Forcefully close the window\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": null,
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Activate",
        "description": " Activate the window\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": null,
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "GetDescendents",
        "description": " Get all descendents of the stdWindow\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " Collection<stdWindow> ",
          "description": "Collection of descendents\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Redraw",
        "description": " Redraw the window\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": null,
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "SendMessage",
        "description": " Sends a message to the window\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "wMsg",
            "type": "Long",
            "description": "Message to send",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "wParam",
            "type": "Long",
            "description": "wParam to send",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "lParam",
            "type": "Long",
            "description": "lParam to send",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "Result of SendMessage\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "PostMessage",
        "description": " Posts a message to the window\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "wMsg",
            "type": "Long",
            "description": "Message to post",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "wParam",
            "type": "Long",
            "description": "wParam to post",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "lParam",
            "type": "Long",
            "description": "lParam to post",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": null,
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "ClickMessage",
        "description": " Clicks the window using PostMessage\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "x",
            "type": "Long",
            "description": "X position to click",
            "optional": true,
            "defaultValue": "&H10000",
            "paramArray": false
          },
          {
            "name": "y",
            "type": "Long",
            "description": "Y position to click",
            "optional": true,
            "defaultValue": "&H10000",
            "paramArray": false
          },
          {
            "name": "Button",
            "type": "EWndMouseButton",
            "description": "Button of mouse to click",
            "optional": true,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "isDoubleClick",
            "type": "Boolean",
            "description": "Whether to double click or not",
            "optional": true,
            "defaultValue": "False",
            "paramArray": false
          },
          {
            "name": "wParam",
            "type": "Long",
            "description": "wParam to send",
            "optional": true,
            "defaultValue": "0",
            "paramArray": false
          }
        ],
        "returns": null,
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "SendKeysInput",
        "description": " Uses `SendInput` to send keystrokes to a window.\r\n",
        "remarks": [],
        "examples": [
          " ```\r\n"
        ],
        "params": [
          {
            "name": "sKeys",
            "type": "String",
            "description": "Keys to send to the window",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "bRaw",
            "type": "Boolean",
            "description": "Whether to ignore special chars or not e.g. `{Enter}`",
            "optional": true,
            "defaultValue": "False",
            "paramArray": false
          },
          {
            "name": "keyDelay",
            "type": "Long",
            "description": "Delay between each keystroke",
            "optional": true,
            "defaultValue": "0",
            "paramArray": false
          },
          {
            "name": "bAutoRelease",
            "type": "Boolean",
            "description": "Whether keys pressed down should be auto-released",
            "optional": true,
            "defaultValue": "True",
            "paramArray": false
          }
        ],
        "returns": null,
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "SendKeysEvent",
        "description": " Uses `kybd_event` to send keystrokes to a window.\r\n",
        "remarks": [],
        "examples": [
          " `notepadWindow.sendKeysEvent(\"^a\")`\r\n"
        ],
        "params": [
          {
            "name": "sKeys",
            "type": "String",
            "description": "Keys to send to the window",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "keyDelay",
            "type": "Long",
            "description": "Delay between each keystroke",
            "optional": true,
            "defaultValue": "10",
            "paramArray": false
          },
          {
            "name": "bAutoRelease",
            "type": "Boolean",
            "description": "Whether keys pressed down should be auto-released",
            "optional": true,
            "defaultValue": "True",
            "paramArray": false
          }
        ],
        "returns": null,
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "SendKeysMessage",
        "description": " Uses `PostMessage` to send keystrokes to a window.\r\n",
        "remarks": [
          " It should be noted that this method is extremely unstable and is unlikely to work in the majority of cases.\r\n"
        ],
        "examples": [
          " `notepadWindow.sendKeysMessage(\"^a\")`\r\n"
        ],
        "params": [
          {
            "name": "sKeys",
            "type": "String",
            "description": "Keys to send to the window",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "keyDelay",
            "type": "Long",
            "description": "Delay between each keystroke",
            "optional": true,
            "defaultValue": "30",
            "paramArray": false
          },
          {
            "name": "bAutoRelease",
            "type": "Boolean",
            "description": "Whether keys pressed down should be auto-released",
            "optional": true,
            "defaultValue": "True",
            "paramArray": false
          }
        ],
        "returns": null,
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "AwaitForWindow",
        "description": " Await for the existence of an window which meets a specified condition.\r\n",
        "remarks": [
          " calls `Me.FindFirst(awaitFor)` to wait for element chosen.\r\n"
        ],
        "examples": [],
        "params": [
          {
            "name": "awaitFor",
            "type": "stdICallable<(stdWindow)=>Boolean>",
            "description": "If this callback returns true, the function will immediately set the result of the function to the awaited window, otherwise will continue awaiting.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "error",
            "type": "stdICallable<(stdWindow)=>Boolean>",
            "description": "If this callback returns true, the function will immediately set the result of the function to `nothing`, otherwise will continue awaiting. If none is provided no error is checked.",
            "optional": true,
            "defaultValue": "Nothing",
            "paramArray": false
          },
          {
            "name": "timeout",
            "type": "Long",
            "description": "Timeout in seconds. Defaults to -1 = NoTimeout. When timeout is reached the return value of the function is `nothing`",
            "optional": true,
            "defaultValue": "-1",
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "Window awaited for\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "setThreadInput",
        "description": " Sets the thread input state of the window.\r\n",
        "remarks": [
          " This is used to synchronise the thread of the window with the thread of VBA. Important for `SendInput`, Hook procedures as well as usage in drag/drop and DDE.\r\n"
        ],
        "examples": [],
        "params": [
          {
            "name": "bAttach",
            "type": "Boolean",
            "description": "Whether to attach or detach the thread",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": null,
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": true
      }
    ],
    "properties": [
      {
        "name": "handle",
        "access": "ReadOnly",
        "description": " Get the hWND / window ID of the window\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "Window handle\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "hDC",
        "access": "ReadOnly",
        "description": " Get the handle to the display context for the window\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "Window display context\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "hDCClient",
        "access": "ReadOnly",
        "description": " Get the handle to the display context for the window client\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "Window display context\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Exists",
        "access": "ReadOnly",
        "description": " Detect if the window exists\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "`true` if window exists, `false` otherwise\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "IsFrozen",
        "access": "ReadOnly",
        "description": " Detect if the window is hanging/frozen\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "`true` if window is hanging/frozen, `false` otherwise\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Caption",
        "access": "ReadWrite",
        "description": " Get/Set the window caption\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "Window caption\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Class",
        "access": "ReadOnly",
        "description": " Get the window class\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "Window's win32 class\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Visible",
        "access": "ReadWrite",
        "description": " Get/Let visibility of window\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "`true` if window is visible, `false` otherwise\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "State",
        "access": "ReadWrite",
        "description": " Get/Let windowState of window\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "Window state\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "children",
        "access": "ReadOnly",
        "description": " Get the child windows of this window\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " Collection<stdWindow> ",
          "description": "Collection of child windows\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "RectClient",
        "access": "ReadOnly",
        "description": " Get the Client rect - I.E. Position and Size of Window's Client area\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " Array<Left: double, Top: double, Width: double, Height: double> ",
          "description": "Client rect\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "RectWindow",
        "access": "ReadWrite",
        "description": " Get/Set the Window rect - I.E. Position and Size of window\r\n",
        "remarks": [
          " - Type is wrapped in Variant, because VBA does not support byval Double array parameters. This is a workaround.\r\n"
        ],
        "examples": [],
        "params": [],
        "returns": {
          "type": " Variant<Array<Left: double, Top: double, Width: double, Height: double>> ",
          "description": "Window rect\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "RectByType",
        "access": "ReadWrite",
        "description": " Get/Set the Window rect with passed param\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "iClWnd",
            "type": "EWndRectType",
            "description": "Type of rect to get/set. Can be `RectTypeClient` or `RectTypeWindow`",
            "optional": true,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " Variant<Array<Left: double, Top: double, Width: double, Height: double>> ",
          "description": "Window rect\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "x",
        "access": "ReadWrite",
        "description": " Get/Set the X position of this window\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "iClWnd",
            "type": "EWndRectType",
            "description": "Type of rect to get/set. Can be `RectTypeClient` or `RectTypeWindow`",
            "optional": true,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "X position of window\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "y",
        "access": "ReadWrite",
        "description": " Get/Set the Y position of this window\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "iClWnd",
            "type": "EWndRectType",
            "description": "Type of rect to get/set. Can be `RectTypeClient` or `RectTypeWindow`",
            "optional": true,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "Y position of window\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "width",
        "access": "ReadWrite",
        "description": " Get/Set the width of this window\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "iClWnd",
            "type": "EWndRectType",
            "description": "Type of rect to get/set. Can be `RectTypeClient` or `RectTypeWindow`",
            "optional": true,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "Width of window\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "height",
        "access": "ReadWrite",
        "description": " Get/Set the height of this window\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "iClWnd",
            "type": "EWndRectType",
            "description": "Type of rect to get/set. Can be `RectTypeClient` or `RectTypeWindow`",
            "optional": true,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "Height of window\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "ProcessID",
        "access": "ReadOnly",
        "description": " Get the ID of the process running this window\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "Process ID\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "ProcessName",
        "access": "ReadOnly",
        "description": " Get the name of the process running this window\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "Process name\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "parent",
        "access": "ReadWrite",
        "description": " Get/Set the window's parent window:\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "Parent window\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "owner",
        "access": "ReadWrite",
        "description": " Get/Set the owner of the window.\r\n",
        "remarks": [
          " - The owner is not the same as the parent. See: Raymond Chen's article: https://devblogs.microsoft.com/oldnewthing/20100315-00/?p=14613\r\n"
        ],
        "examples": [],
        "params": [],
        "returns": {
          "type": "stdWindow",
          "description": ""
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "HICON",
        "access": "ReadWrite",
        "description": " Get/Set a handle to the icon of the window\r\n",
        "remarks": [],
        "examples": [
          " - \r\n"
        ],
        "params": [],
        "returns": {
          "type": " ",
          "description": "Icon handle\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "AncestralRoot",
        "access": "ReadOnly",
        "description": " Get the root window of this Window/ChildWindow\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "Searches up the window tree to find the top level window which is a direct child of the desktop window.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Style",
        "access": "ReadWrite",
        "description": " Get/Set the style of the window\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "Window style\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "StyleTexts",
        "access": "ReadOnly",
        "description": " Obtain a semi-colon delimited list of styles\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "semi-colon delimited list of style names e.g. \"WS_BORDER;WS_CAPTION\"\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "StyleEx",
        "access": "ReadWrite",
        "description": " Get/Set the extended style of the window\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "Window extended style\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "StyleExTexts",
        "access": "ReadOnly",
        "description": " Obtain a semi-colon delimited list of styles\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "semi-colon delimited list of styleex names e.g. \"WS_EX_APPWINDOW;WS_EX_TOPMOST\"\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "UserData",
        "access": "ReadWrite",
        "description": " Get/Set a pointer to userdata/metadata\r\n",
        "remarks": [
          " - This can be set to a VBA object pointer. However, this is not recommended as VBA will still garbage collect the object unless the ref counter is incremented, and if it is the ref counter won't decrement upon window destroy.\r\n"
        ],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "This is a pointer to a location where extra information is stored. Or ClientCreateStruct (for MDI windows), or null if no extra data required.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "WndProc",
        "access": "ReadWrite",
        "description": " Get/Set the WndProc of the window\r\n",
        "remarks": [
          " - This is a pointer to the window's WndProc function. This can be set to a VBA module function pointer if the Window is owned by Excel.\r\n"
        ],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "Window's WndProc\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "isResizable",
        "access": "ReadWrite",
        "description": " Get/Set ability to resize\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "`true` if window is resizable, `false` otherwise\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "isCaptionVisible",
        "access": "ReadWrite",
        "description": " Get/Set caption visibility\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "`true` if window caption is visible, `false` otherwise\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "isBorderVisible",
        "access": "ReadWrite",
        "description": " Get/Set border visibility\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": "Boolean",
          "description": ""
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "isMaximiseButtonVisible",
        "access": "ReadWrite",
        "description": " Get/Set maximise button visibility\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": "Boolean",
          "description": ""
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "isMinimiseButtonVisible",
        "access": "ReadWrite",
        "description": " Get/Set minimise button visibility\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": "Boolean",
          "description": ""
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "isSystemMenuVisible",
        "access": "ReadWrite",
        "description": " Get/Set system menu visibility\r\n",
        "remarks": [
          " - The system menu is the menu that appears when you click the icon in the top left of the window.\r\n          "
        ],
        "examples": [],
        "params": [],
        "returns": {
          "type": "Boolean",
          "description": ""
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "isVerticalScrollbarVisible",
        "access": "ReadWrite",
        "description": " Get/Set vertical scrollbar visibility\r\n",
        "remarks": [
          " - Scrollbar visibility doesn't do anything on VBA userform windows.\r\n"
        ],
        "examples": [],
        "params": [],
        "returns": {
          "type": "Boolean",
          "description": ""
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "isHorizontalScrollbarVisible",
        "access": "ReadWrite",
        "description": " Get/Set horizontal scrollbar visibility\r\n",
        "remarks": [
          " - Scrollbar visibility doesn't do anything on VBA userform windows.\r\n"
        ],
        "examples": [],
        "params": [],
        "returns": {
          "type": "Boolean",
          "description": ""
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "isChildWindow",
        "access": "ReadWrite",
        "description": " Get/Set whether the window is a child window\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "`true` if window is a child window, `false` otherwise\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "isPopupWindow",
        "access": "ReadWrite",
        "description": " Get/Set whether the window is a popup window\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "`true` if window is a popup window, `false` otherwise\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "isAlwaysOnTop",
        "access": "ReadWrite",
        "description": " Get/Set topmost / Always on top\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "`true` if window is topmost, `false` otherwise\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "isAppWindow",
        "access": "ReadWrite",
        "description": " Get/Set whether the window is an app window\r\n",
        "remarks": [
          " - An app window is a window that is intended to be used as a main window for an application.\r\n"
        ],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "`true` if window is an app window, `false` otherwise\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "isToolWindow",
        "access": "ReadWrite",
        "description": " Get/Set whether the window is a tool window\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "`true` if window is a tool window, `false` otherwise\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "isClickThroughEnabled",
        "access": "ReadWrite",
        "description": " Get/Set whether clicks are passed through the window. I.E. Clicks will be passed to the window behind this one.\r\n",
        "remarks": [
          " - This is useful in combination with layered windows to create click-through windows.\r\n"
        ],
        "examples": [],
        "params": [],
        "returns": {
          "type": "Boolean",
          "description": ""
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "isBorderEdgeSunken",
        "access": "ReadWrite",
        "description": " Get/Set whether the border has a sunken edge\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": "Boolean",
          "description": ""
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "isBorderDoubled",
        "access": "ReadWrite",
        "description": " Get/Set whether the window is double bordered\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": "Boolean",
          "description": ""
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "isLayeredWindow",
        "access": "ReadWrite",
        "description": " Get/Set whether the window is a layered window\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": "Boolean",
          "description": ""
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "LayeredWindowFlags",
        "access": "ReadWrite",
        "description": " Get/Set the existing layered window flags\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": "LayeredWindowFlag",
          "description": ""
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "TransparentColor",
        "access": "ReadWrite",
        "description": " Get/Set the transparent color for a window.  for a layered window\r\n",
        "remarks": [
          " - Setting this value will also set the window to be a layered window if it is not already.\r\n"
        ],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "The transparent color for the window. If isLayeredWindow is false, or the window's LayeredWindowFlags does not have the ChromaKey flag set, this will return -1.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "Opacity",
        "access": "ReadWrite",
        "description": " Get/Set the opacity of a layered window\r\n",
        "remarks": [
          " - Setting this value will also set the window to be a layered window if it is not already.\r\n"
        ],
        "examples": [],
        "params": [],
        "returns": {
          "type": "Byte",
          "description": ""
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "ShellWindow",
        "access": "ReadOnly",
        "description": " Gets the Shell Window COM object for this window if it exists\r\n",
        "remarks": [],
        "examples": [
          " ```\r\n  "
        ],
        "params": [],
        "returns": {
          "type": " Object<Shell.IWebBrowser2|Nothing> ",
          "description": "Shell Window COM object\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      }
    ],
    "description": "",
    "remarks": [],
    "examples": [],
    "devNotes": [],
    "todos": [
      "Use SendInput()"
    ],
    "constructors": [
      {
        "name": "Create",
        "description": " ================================================================================================\r\n",
        "remarks": [
          " System Class Names: `BUTTON`, `COMBOBOX`, `EDIT`, `LISTBOX`, `MDICLIENT`, `RICHEDIT`, `RICHEDIT_CLASS`, `SCROLLBAR`, `STATIC`\r\n"
        ],
        "examples": [
          " ```vb\r\n"
        ],
        "params": [
          {
            "name": "sClassName",
            "type": "String",
            "description": "The class name can be any name registered with RegisterClass or RegisterClassEx, provided that the module that registers the class is also the module that creates the window. The class name can also be any of the predefined system class names. For a list of system class names, see the Remarks section.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "x",
            "type": "Long",
            "description": "The x coordinate of the window",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "y",
            "type": "Long",
            "description": "The y coordinate of the window",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "width",
            "type": "Long",
            "description": "The width of the window",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "height",
            "type": "Long",
            "description": "The height of the window",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "sCaption",
            "type": "String",
            "description": "The name/caption of the window",
            "optional": true,
            "defaultValue": "vbNullString",
            "paramArray": false
          },
          {
            "name": "dwStyle",
            "type": "Long",
            "description": "The window style for the window",
            "optional": true,
            "defaultValue": "WS_POPUP",
            "paramArray": false
          },
          {
            "name": "hWndParent",
            "type": "LongPtr",
            "description": "Parent window handle. Can be 0 for pop-up windows.",
            "optional": true,
            "defaultValue": "0",
            "paramArray": false
          },
          {
            "name": "hMenu",
            "type": "LongPtr",
            "description": "Menu handle. Can be 0 for pop-up windows.",
            "optional": true,
            "defaultValue": "0",
            "paramArray": false
          },
          {
            "name": "hInstance",
            "type": "LongPtr",
            "description": "Module Instance handle.",
            "optional": true,
            "defaultValue": "0",
            "paramArray": false
          },
          {
            "name": "lpParam",
            "type": "Long",
            "description": "Pointer to a location where extra information is stored. Or ClientCreateStruct (for MDI windows), or null if no extra data required",
            "optional": true,
            "defaultValue": "0",
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "The created window\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CreateHighlightRect",
        "description": " Create a static popup window and return a window object\r\n",
        "remarks": [
          " See [Creating a transparent window](https://stackoverflow.com/questions/3970066/creating-a-transparent-window-in-c-win32)\r\n"
        ],
        "examples": [],
        "params": [
          {
            "name": "x",
            "type": "Long",
            "description": "The x coordinate of the window",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "y",
            "type": "Long",
            "description": "The y coordinate of the window",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "width",
            "type": "Long",
            "description": "The width of the window",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "height",
            "type": "Long",
            "description": "The height of the window",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "BorderWidth",
            "type": "Long",
            "description": "The width of the colored border",
            "optional": true,
            "defaultValue": "5",
            "paramArray": false
          },
          {
            "name": "BorderColor",
            "type": "Long",
            "description": "The color of the colored border",
            "optional": true,
            "defaultValue": "255",
            "paramArray": false
          }
        ],
        "returns": {
          "type": "           ",
          "description": "The created highlighting box\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CreateFromHwnd",
        "description": " Create a window object from an existing window handle\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "hwnd",
            "type": "LongPtr",
            "description": "Handle to window (hwnd) to create window object for",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "Specificed window.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CreateFromApplication",
        "description": " Creates an `stdWindow` object from the current running application (e.g. Excel / Word / Powerpoint).\r\n",
        "remarks": [
          " - This function is only implemented for Excel, Word and PowerPoint. For other applications, find the window with `stdWindow.CreateFromDesktop()` and then use `desktop.children` to find the required window object.\r\n"
        ],
        "examples": [],
        "params": [
          {
            "name": "oApp",
            "type": "Object",
            "description": "Optional. Application object to create window from. If not specified, the current running application is used.",
            "optional": true,
            "defaultValue": "nothing",
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "Window object representing the current running application\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CreateFromDesktop",
        "description": " Create a window from the desktop window\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "Desktop window\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CreateFromPoint",
        "description": " Find and Create a window object for a window displayed intersecting a point on the screen.\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "x",
            "type": "Long",
            "description": "X of Point to find window at.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          },
          {
            "name": "y",
            "type": "Long",
            "description": "Y of Point to find window at.",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "Window intersecting point.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CreateFromIUnknown",
        "description": " Create a window object from an IUnknown object.\r\n",
        "remarks": [
          " - Uses IUserWindow::GetWindow() to get the window handle. This is implemented by `IOleWindow`, `IInternetSecurityMgrSite` and `IShellView`.\r\n",
          " - A `UserForm` is an example of an object which implements `IOleWindow`.\r\n"
        ],
        "examples": [],
        "params": [
          {
            "name": "obj",
            "type": "IUnknown",
            "description": "Object which implements GetWindow() method",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "Window specified by the object.\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CreateFromIAccessible",
        "description": " Create a window object from an IAccessible object\r\n",
        "remarks": [],
        "examples": [],
        "params": [
          {
            "name": "pAcc",
            "type": "IAccessible",
            "description": "Object which implements IAccessible",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "Window specified by IAccessible object\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CreateFromContextMenu",
        "description": " Create a window object from the context menu. There should only ever be 1 context menu on the system at one time.\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " ",
          "description": "Window object representing the ContextMenu\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CreateManyFromProcessId",
        "description": " Create window objects for all desktop windows which have a specified process ID\r\n",
        "remarks": [
          " - Functionally equivalent of `stdWindow.CreateFromDesktop().FindAll(stdLambda.Create(\"$2.exists and $2.visible and $2.ProcessID = $1\").bind(processID), iStaticDepthLimit:=1)`\r\n"
        ],
        "examples": [],
        "params": [
          {
            "name": "processID",
            "type": "Long",
            "description": "Process ID to find windows for",
            "optional": false,
            "defaultValue": null,
            "paramArray": false
          }
        ],
        "returns": {
          "type": " ",
          "description": "Collection of visible windows for the process\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "CreateManyFromShellWindows",
        "description": " Create window objects for all shell windows\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " Collection<stdWindow> ",
          "description": "Collection of shell windows\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "AsIAccessible",
        "description": " Converts a stdWindow object to a IAccessible object\r\n",
        "remarks": [],
        "examples": [],
        "params": [],
        "returns": {
          "type": " Object<IAccessible> ",
          "description": "IAccessible object representing the window\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      },
      {
        "name": "AsNativeObject",
        "description": " Converts a stdWindow object to a IAccessible object\r\n",
        "remarks": [],
        "examples": [
          " - `stdWindow.CreateFromHwnd(...).FindFirst(stdLambda.Create(\"$1.Class = \"\"EXCEL7\"\"\")).AsNativeObject.Application)`\r\n"
        ],
        "params": [],
        "returns": {
          "type": " Object<IAccessible> ",
          "description": "IAccessible object representing the window\r\n"
        },
        "deprecation": {
          "status": false,
          "message": ""
        },
        "isDefaultMember": false,
        "devNotes": [],
        "todos": [],
        "isProtected": false
      }
    ],
    "events": [],
    "implements": [
      "GetWindow",
      "IAccessible"
    ]
  }
]